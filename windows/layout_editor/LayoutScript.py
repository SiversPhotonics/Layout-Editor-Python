# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")


# Import the low-level C/C++ module
import layout_editor._LayoutScript as _LayoutScript


try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (
        self.__class__.__module__,
        self.__class__.__name__,
        strthis,
    )


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)

    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)

    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""

    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())

    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""

    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


def unicoodeData(obj, char_size, len):
    return _LayoutScript.unicoodeData(obj, char_size, len)


def unicodeNew(len, maxchar, kind, data):
    return _LayoutScript.unicodeNew(len, maxchar, kind, data)


def unicodeWrite(kind, data, index, value):
    return _LayoutScript.unicodeWrite(kind, data, index, value)


def PyToQ_String(obj):
    return _LayoutScript.PyToQ_String(obj)


def QToPy_String(qstr):
    return _LayoutScript.QToPy_String(qstr)


class pointerInt(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self):
        _LayoutScript.pointerInt_swiginit(self, _LayoutScript.new_pointerInt())

    __swig_destroy__ = _LayoutScript.delete_pointerInt

    def assign(self, value):
        return _LayoutScript.pointerInt_assign(self, value)

    def value(self):
        return _LayoutScript.pointerInt_value(self)

    def cast(self):
        return _LayoutScript.pointerInt_cast(self)

    @staticmethod
    def frompointer(t):
        return _LayoutScript.pointerInt_frompointer(t)


# Register pointerInt in _LayoutScript:
_LayoutScript.pointerInt_swigregister(pointerInt)


def pointerInt_frompointer(t):
    return _LayoutScript.pointerInt_frompointer(t)


class pointerDouble(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self):
        _LayoutScript.pointerDouble_swiginit(self, _LayoutScript.new_pointerDouble())

    __swig_destroy__ = _LayoutScript.delete_pointerDouble

    def assign(self, value):
        return _LayoutScript.pointerDouble_assign(self, value)

    def value(self):
        return _LayoutScript.pointerDouble_value(self)

    def cast(self):
        return _LayoutScript.pointerDouble_cast(self)

    @staticmethod
    def frompointer(t):
        return _LayoutScript.pointerDouble_frompointer(t)


# Register pointerDouble in _LayoutScript:
_LayoutScript.pointerDouble_swigregister(pointerDouble)


def pointerDouble_frompointer(t):
    return _LayoutScript.pointerDouble_frompointer(t)


class backgroundModule(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def addBackground(self, filename):
        return _LayoutScript.backgroundModule_addBackground(self, filename)

    def backgroundOffset(self, handel, x, y):
        return _LayoutScript.backgroundModule_backgroundOffset(self, handel, x, y)

    def backgroundScale(self, handel, sx, sy):
        return _LayoutScript.backgroundModule_backgroundScale(self, handel, sx, sy)

    def backgroundShear(self, handel, sx, sy):
        return _LayoutScript.backgroundModule_backgroundShear(self, handel, sx, sy)

    def backgroundRotate(self, handel, angle):
        return _LayoutScript.backgroundModule_backgroundRotate(self, handel, angle)

    def backgroundName(self, handel, name):
        return _LayoutScript.backgroundModule_backgroundName(self, handel, name)

    def backgroundOffsetGetX(self, handel):
        return _LayoutScript.backgroundModule_backgroundOffsetGetX(self, handel)

    def backgroundOffsetGetY(self, handel):
        return _LayoutScript.backgroundModule_backgroundOffsetGetY(self, handel)

    def backgroundScaleGetX(self, handel):
        return _LayoutScript.backgroundModule_backgroundScaleGetX(self, handel)

    def backgroundScaleGetY(self, handel):
        return _LayoutScript.backgroundModule_backgroundScaleGetY(self, handel)

    def backgroundShearGetX(self, handel):
        return _LayoutScript.backgroundModule_backgroundShearGetX(self, handel)

    def backgroundShearGetY(self, handel):
        return _LayoutScript.backgroundModule_backgroundShearGetY(self, handel)

    def backgroundRotateGet(self, handel):
        return _LayoutScript.backgroundModule_backgroundRotateGet(self, handel)

    def backgroundTransparency(self, handel, value):
        return _LayoutScript.backgroundModule_backgroundTransparency(
            self, handel, value
        )

    def backgroundTransparencyGet(self, handel):
        return _LayoutScript.backgroundModule_backgroundTransparencyGet(self, handel)

    def clearBackground(self):
        return _LayoutScript.backgroundModule_clearBackground(self)

    def setShapeColor(self, red, green, blue):
        return _LayoutScript.backgroundModule_setShapeColor(self, red, green, blue)

    def setShapeColorRange(self, range):
        return _LayoutScript.backgroundModule_setShapeColorRange(self, range)

    def setBackgroundColor(self, red, green, blue):
        return _LayoutScript.backgroundModule_setBackgroundColor(self, red, green, blue)

    def setBackgroundColorRange(self, range):
        return _LayoutScript.backgroundModule_setBackgroundColorRange(self, range)

    def setIgnorePixel(self, ignore):
        return _LayoutScript.backgroundModule_setIgnorePixel(self, ignore)

    def centerView(self, handel):
        return _LayoutScript.backgroundModule_centerView(self, handel)

    def setThreshold(self, d):
        return _LayoutScript.backgroundModule_setThreshold(self, d)

    def setRisingThreshold(self, b):
        return _LayoutScript.backgroundModule_setRisingThreshold(self, b)

    def vectorizeThreshold(self, handel):
        return _LayoutScript.backgroundModule_vectorizeThreshold(self, handel)

    def hide(self, handel):
        return _LayoutScript.backgroundModule_hide(self, handel)

    def show(self, handel):
        return _LayoutScript.backgroundModule_show(self, handel)

    def showCell(self, handel, cell):
        return _LayoutScript.backgroundModule_showCell(self, handel, cell)

    def hideAll(self):
        return _LayoutScript.backgroundModule_hideAll(self)

    def showAll(self):
        return _LayoutScript.backgroundModule_showAll(self)

    def showAllCell(self, cell):
        return _LayoutScript.backgroundModule_showAllCell(self, cell)

    def setAnchor(self, handle, x, y):
        return _LayoutScript.backgroundModule_setAnchor(self, handle, x, y)

    def setAnchorCenter(self, handle):
        return _LayoutScript.backgroundModule_setAnchorCenter(self, handle)

    def setAnchorTopLeft(self, handle):
        return _LayoutScript.backgroundModule_setAnchorTopLeft(self, handle)

    def setImageAnchor(self, handle, x, y):
        return _LayoutScript.backgroundModule_setImageAnchor(self, handle, x, y)

    def vectorizePixel(self, handel):
        return _LayoutScript.backgroundModule_vectorizePixel(self, handel)

    __swig_destroy__ = _LayoutScript.delete_backgroundModule


# Register backgroundModule in _LayoutScript:
_LayoutScript.backgroundModule_swigregister(backgroundModule)


class barcodeModule(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    data = property(
        _LayoutScript.barcodeModule_data_get, _LayoutScript.barcodeModule_data_set
    )
    ratio = property(
        _LayoutScript.barcodeModule_ratio_get, _LayoutScript.barcodeModule_ratio_set
    )

    def addBarcode(self, arg2):
        return _LayoutScript.barcodeModule_addBarcode(self, arg2)

    def setCode39(self):
        return _LayoutScript.barcodeModule_setCode39(self)

    def setCode39Mod43(self):
        return _LayoutScript.barcodeModule_setCode39Mod43(self)

    def setCode128(self):
        return _LayoutScript.barcodeModule_setCode128(self)

    def setCode128A(self):
        return _LayoutScript.barcodeModule_setCode128A(self)

    def setCode128B(self):
        return _LayoutScript.barcodeModule_setCode128B(self)

    def setCode128C(self):
        return _LayoutScript.barcodeModule_setCode128C(self)

    def setDatamatrix(self):
        return _LayoutScript.barcodeModule_setDatamatrix(self)

    def setQrCode(self):
        return _LayoutScript.barcodeModule_setQrCode(self)

    def setMicroQrCode(self):
        return _LayoutScript.barcodeModule_setMicroQrCode(self)

    __swig_destroy__ = _LayoutScript.delete_barcodeModule


# Register barcodeModule in _LayoutScript:
_LayoutScript.barcodeModule_swigregister(barcodeModule)


class booleanHandler(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, drawing):
        _LayoutScript.booleanHandler_swiginit(
            self, _LayoutScript.new_booleanHandler(drawing)
        )

    def mergeSelect(self, layer):
        return _LayoutScript.booleanHandler_mergeSelect(self, layer)

    def setA(self):
        return _LayoutScript.booleanHandler_setA(self)

    def setB(self):
        return _LayoutScript.booleanHandler_setB(self)

    def aPlusB(self):
        return _LayoutScript.booleanHandler_aPlusB(self)

    def aMinusB(self):
        return _LayoutScript.booleanHandler_aMinusB(self)

    def bMinusA(self):
        return _LayoutScript.booleanHandler_bMinusA(self)

    def aMultiB(self):
        return _LayoutScript.booleanHandler_aMultiB(self)

    def aExorB(self):
        return _LayoutScript.booleanHandler_aExorB(self)

    def aPlusBDel(self):
        return _LayoutScript.booleanHandler_aPlusBDel(self)

    def aMinusBDel(self):
        return _LayoutScript.booleanHandler_aMinusBDel(self)

    def bMinusADel(self):
        return _LayoutScript.booleanHandler_bMinusADel(self)

    def aMinusBDelA(self):
        return _LayoutScript.booleanHandler_aMinusBDelA(self)

    def aMinusBDelB(self):
        return _LayoutScript.booleanHandler_aMinusBDelB(self)

    def bMinusADelB(self):
        return _LayoutScript.booleanHandler_bMinusADelB(self)

    def bMinusADelA(self):
        return _LayoutScript.booleanHandler_bMinusADelA(self)

    def aMultiBDel(self):
        return _LayoutScript.booleanHandler_aMultiBDel(self)

    def aExorBDel(self):
        return _LayoutScript.booleanHandler_aExorBDel(self)

    def clean(self):
        return _LayoutScript.booleanHandler_clean(self)

    def performAPlusB(self):
        return _LayoutScript.booleanHandler_performAPlusB(self)

    def performAMinusB(self):
        return _LayoutScript.booleanHandler_performAMinusB(self)

    def performBMinusA(self):
        return _LayoutScript.booleanHandler_performBMinusA(self)

    def performAMultiB(self):
        return _LayoutScript.booleanHandler_performAMultiB(self)

    def performAEorB(self):
        return _LayoutScript.booleanHandler_performAEorB(self)

    def getResultingPolygon(self):
        return _LayoutScript.booleanHandler_getResultingPolygon(self)

    def setResultToA(self):
        return _LayoutScript.booleanHandler_setResultToA(self)

    def setResultToB(self):
        return _LayoutScript.booleanHandler_setResultToB(self)

    def addLayerA(self, layer):
        return _LayoutScript.booleanHandler_addLayerA(self, layer)

    def addLayerB(self, layer):
        return _LayoutScript.booleanHandler_addLayerB(self, layer)

    def addA(self, *args):
        return _LayoutScript.booleanHandler_addA(self, *args)

    def addB(self, *args):
        return _LayoutScript.booleanHandler_addB(self, *args)

    def boolOnLayer(self, layerA, layerB, layerResult, operation, nx=0, ny=0, border=0):
        return _LayoutScript.booleanHandler_boolOnLayer(
            self, layerA, layerB, layerResult, operation, nx, ny, border
        )

    __swig_destroy__ = _LayoutScript.delete_booleanHandler


# Register booleanHandler in _LayoutScript:
_LayoutScript.booleanHandler_swigregister(booleanHandler)


class cell(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def addBox(self, *args):
        return _LayoutScript.cell_addBox(self, *args)

    def addCellref(self, c, pos):
        return _LayoutScript.cell_addCellref(self, c, pos)

    def addCellrefArray(self, *args):
        return _LayoutScript.cell_addCellrefArray(self, *args)

    def addChamferedBox(self, x, y, b, h, chamfer, layer):
        return _LayoutScript.cell_addChamferedBox(self, x, y, b, h, chamfer, layer)

    def addCircle(self, *args):
        return _LayoutScript.cell_addCircle(self, *args)

    def addCircleBox(self, p1, p2, layer):
        return _LayoutScript.cell_addCircleBox(self, p1, p2, layer)

    def addEllipse(self, layer, center, rx, ry):
        return _LayoutScript.cell_addEllipse(self, layer, center, rx, ry)

    def addPath(self, *args):
        return _LayoutScript.cell_addPath(self, *args)

    def addPolygon(self, points, layer):
        return _LayoutScript.cell_addPolygon(self, points, layer)

    def addPolygonArc(
        self, center, radiusInner, radiusOuter, angleStart, angleStop, layer
    ):
        return _LayoutScript.cell_addPolygonArc(
            self, center, radiusInner, radiusOuter, angleStart, angleStop, layer
        )

    def addRoundedBox(self, x, y, b, h, radius, layer):
        return _LayoutScript.cell_addRoundedBox(self, x, y, b, h, radius, layer)

    def addSector(self, center, radius, angleStart, angleStop, layer):
        return _LayoutScript.cell_addSector(
            self, center, radius, angleStart, angleStop, layer
        )

    def addText(self, layer, pos, text):
        return _LayoutScript.cell_addText(self, layer, pos, text)

    def addCornerAreaSelect(self, value1, value2, angleInt):
        return _LayoutScript.cell_addCornerAreaSelect(self, value1, value2, angleInt)

    def areaLayer(self, layer):
        return _LayoutScript.cell_areaLayer(self, layer)

    def areaSelect(self):
        return _LayoutScript.cell_areaSelect(self)

    def areaSelected(self):
        return _LayoutScript.cell_areaSelected(self)

    def bowImprovementSelect(self, detectAngle, pointFactor, minLength):
        return _LayoutScript.cell_bowImprovementSelect(
            self, detectAngle, pointFactor, minLength
        )

    def boxDeselect(self):
        return _LayoutScript.cell_boxDeselect(self)

    def boxSelectVisible(self):
        return _LayoutScript.cell_boxSelectVisible(self)

    def cDeselect(self, select):
        return _LayoutScript.cell_cDeselect(self, select)

    cellName = property(
        _LayoutScript.cell_cellName_get, _LayoutScript.cell_cellName_set
    )

    def chamferSelect(self, value, type, angleInt):
        return _LayoutScript.cell_chamferSelect(self, value, type, angleInt)

    def circumferenceSelect(self):
        return _LayoutScript.cell_circumferenceSelect(self)

    def circumferenceSelected(self):
        return _LayoutScript.cell_circumferenceSelected(self)

    def clearProperties(self):
        return _LayoutScript.cell_clearProperties(self)

    def closeToPolygon(self):
        return _LayoutScript.cell_closeToPolygon(self)

    def closeToPolygonSelect(self):
        return _LayoutScript.cell_closeToPolygonSelect(self)

    def compare(self, Cell):
        return _LayoutScript.cell_compare(self, Cell)

    def convertToPolygonIfClosed(self):
        return _LayoutScript.cell_convertToPolygonIfClosed(self)

    def convertToPolygonIfClosedSelect(self):
        return _LayoutScript.cell_convertToPolygonIfClosedSelect(self)

    def countSelectPoints(self):
        return _LayoutScript.cell_countSelectPoints(self)

    def countSelectPath(self):
        return _LayoutScript.cell_countSelectPath(self)

    def countSelectBox(self):
        return _LayoutScript.cell_countSelectBox(self)

    def countSelectPolygon(self):
        return _LayoutScript.cell_countSelectPolygon(self)

    def countSelectCellref(self):
        return _LayoutScript.cell_countSelectCellref(self)

    def countSelectCellrefarray(self):
        return _LayoutScript.cell_countSelectCellrefarray(self)

    def countSelectText(self):
        return _LayoutScript.cell_countSelectText(self)

    def countSelectCircles(self):
        return _LayoutScript.cell_countSelectCircles(self)

    def countSelectElements(self):
        return _LayoutScript.cell_countSelectElements(self)

    def countSelectShapes(self):
        return _LayoutScript.cell_countSelectShapes(self)

    def copyCell(self, arg2):
        return _LayoutScript.cell_copyCell(self, arg2)

    def copySelect(self, *args):
        return _LayoutScript.cell_copySelect(self, *args)

    def cropWithSelection(self):
        return _LayoutScript.cell_cropWithSelection(self)

    def cropSharpAnglesSelect(self, i):
        return _LayoutScript.cell_cropSharpAnglesSelect(self, i)

    def cSelect(self, select):
        return _LayoutScript.cell_cSelect(self, select)

    def cutSelect(self, p1, p2):
        return _LayoutScript.cell_cutSelect(self, p1, p2)

    def deleteElement(self, e):
        return _LayoutScript.cell_deleteElement(self, e)

    def deleteLayer(self, layer):
        return _LayoutScript.cell_deleteLayer(self, layer)

    def deleteRefs(self, c):
        return _LayoutScript.cell_deleteRefs(self, c)

    def deleteSelect(self):
        return _LayoutScript.cell_deleteSelect(self)

    def depend(self, Cell):
        return _LayoutScript.cell_depend(self, Cell)

    def deselectAll(self):
        return _LayoutScript.cell_deselectAll(self)

    def deselectCellref(self, cellname):
        return _LayoutScript.cell_deselectCellref(self, cellname)

    def deselectLabeledShapesOnLayer(self, layerText, label, layerShape=-1):
        return _LayoutScript.cell_deselectLabeledShapesOnLayer(
            self, layerText, label, layerShape
        )

    def deselectLayer(self, layer):
        return _LayoutScript.cell_deselectLayer(self, layer)

    def deselectNode(self, node):
        return _LayoutScript.cell_deselectNode(self, node)

    def deselectNodeOnLayer(self, node, layer):
        return _LayoutScript.cell_deselectNodeOnLayer(self, node, layer)

    def deselectShapeWithArea(self, min, max):
        return _LayoutScript.cell_deselectShapeWithArea(self, min, max)

    def deselectText(self, text, layer=-1):
        return _LayoutScript.cell_deselectText(self, text, layer)

    def edgeRemoveSelect(self, i):
        return _LayoutScript.cell_edgeRemoveSelect(self, i)

    def fAllDeselect(self, select):
        return _LayoutScript.cell_fAllDeselect(self, select)

    def fAllSelect(self, select):
        return _LayoutScript.cell_fAllSelect(self, select)

    def fDeselect(self, select):
        return _LayoutScript.cell_fDeselect(self, select)

    def fDeselectLayer(self, select, layer):
        return _LayoutScript.cell_fDeselectLayer(self, select, layer)

    def filletBezierSelect(self, value, type, angleInt):
        return _LayoutScript.cell_filletBezierSelect(self, value, type, angleInt)

    def filletRoundSelect(self, value, type, angleInt):
        return _LayoutScript.cell_filletRoundSelect(self, value, type, angleInt)

    firstElement = property(
        _LayoutScript.cell_firstElement_get, _LayoutScript.cell_firstElement_set
    )

    def flatSelect(self):
        return _LayoutScript.cell_flatSelect(self)

    def flatAllSelect(self):
        return _LayoutScript.cell_flatAllSelect(self)

    def flatCellref(self, e):
        return _LayoutScript.cell_flatCellref(self, e)

    def flatCellrefArray(self):
        return _LayoutScript.cell_flatCellrefArray(self)

    def flatLayer(self, layer):
        return _LayoutScript.cell_flatLayer(self, layer)

    def flatAllLayer(self, layer):
        return _LayoutScript.cell_flatAllLayer(self, layer)

    def fSelect(self, select):
        return _LayoutScript.cell_fSelect(self, select)

    def fSelectLayer(self, select, layer):
        return _LayoutScript.cell_fSelectLayer(self, select, layer)

    def fractureTriangleSelect(self, maxSize):
        return _LayoutScript.cell_fractureTriangleSelect(self, maxSize)

    def fractureBoxSelect(self, maxSize, l=None):
        return _LayoutScript.cell_fractureBoxSelect(self, maxSize, l)

    def fractureTrapezoidSelect(self, maxSize):
        return _LayoutScript.cell_fractureTrapezoidSelect(self, maxSize)

    def fractureLineSelect(
        self, lineSize, overlap=0, keepSmallShapes=False, deletedShapes=None, l=None
    ):
        return _LayoutScript.cell_fractureLineSelect(
            self, lineSize, overlap, keepSmallShapes, deletedShapes, l
        )

    def getDensityLayer(self, *args):
        return _LayoutScript.cell_getDensityLayer(self, *args)

    def group(self, cell_):
        return _LayoutScript.cell_group(self, cell_)

    def groupStructure(self, cell_):
        return _LayoutScript.cell_groupStructure(self, cell_)

    def identical(self, Cell):
        return _LayoutScript.cell_identical(self, Cell)

    def incircleSelect(self, layer):
        return _LayoutScript.cell_incircleSelect(self, layer)

    def invertSelect(self):
        return _LayoutScript.cell_invertSelect(self)

    def mapLayer(self, t):
        return _LayoutScript.cell_mapLayer(self, t)

    def maximum(self, *args):
        return _LayoutScript.cell_maximum(self, *args)

    def maximumSelect(self, *args):
        return _LayoutScript.cell_maximumSelect(self, *args)

    def mergeSelect(self):
        return _LayoutScript.cell_mergeSelect(self)

    def measureSpaceVisible(self, p1):
        return _LayoutScript.cell_measureSpaceVisible(self, p1)

    def minkowskiSumSelect(self, pa):
        return _LayoutScript.cell_minkowskiSumSelect(self, pa)

    def minimum(self, *args):
        return _LayoutScript.cell_minimum(self, *args)

    def minimumSelect(self, *args):
        return _LayoutScript.cell_minimumSelect(self, *args)

    def mirrorSelect(self, p1, p2):
        return _LayoutScript.cell_mirrorSelect(self, p1, p2)

    def modifyCornersSelect(self, value1, value2):
        return _LayoutScript.cell_modifyCornersSelect(self, value1, value2)

    def move(self, pos):
        return _LayoutScript.cell_move(self, pos)

    def moveSelect(self, pos):
        return _LayoutScript.cell_moveSelect(self, pos)

    def moveToLayerSelect(self, layer):
        return _LayoutScript.cell_moveToLayerSelect(self, layer)

    def nearestElement(self, p):
        return _LayoutScript.cell_nearestElement(self, p)

    def pathDeselect(self):
        return _LayoutScript.cell_pathDeselect(self)

    def pathSelectVisible(self):
        return _LayoutScript.cell_pathSelectVisible(self)

    def pDeselect(self, select):
        return _LayoutScript.cell_pDeselect(self, select)

    def polygonDeselect(self):
        return _LayoutScript.cell_polygonDeselect(self)

    def polygonSelectVisible(self):
        return _LayoutScript.cell_polygonSelectVisible(self)

    def pointOnLayer(self, p, layer):
        return _LayoutScript.cell_pointOnLayer(self, p, layer)

    def pSelect(self, select):
        return _LayoutScript.cell_pSelect(self, select)

    def punchWithSelection(self):
        return _LayoutScript.cell_punchWithSelection(self)

    def relink(self, Cellold, Cellnew):
        return _LayoutScript.cell_relink(self, Cellold, Cellnew)

    def relinkSelect(self, Cellnew):
        return _LayoutScript.cell_relinkSelect(self, Cellnew)

    def replaceText(self, text1, text2):
        return _LayoutScript.cell_replaceText(self, text1, text2)

    def resize(self, scale):
        return _LayoutScript.cell_resize(self, scale)

    def rotateSelect(self, angle, pos):
        return _LayoutScript.cell_rotateSelect(self, angle, pos)

    def roundSelect(self, i):
        return _LayoutScript.cell_roundSelect(self, i)

    def scaleSelect(self, *args):
        return _LayoutScript.cell_scaleSelect(self, *args)

    def selectAll(self):
        return _LayoutScript.cell_selectAll(self)

    def selectCellref(self, cellname):
        return _LayoutScript.cell_selectCellref(self, cellname)

    def selectDatatype(self, i):
        return _LayoutScript.cell_selectDatatype(self, i)

    def selectedElement(self, e=None):
        return _LayoutScript.cell_selectedElement(self, e)

    def selectLabeledShapesOnLayer(self, layerText, label, layerShape=-1):
        return _LayoutScript.cell_selectLabeledShapesOnLayer(
            self, layerText, label, layerShape
        )

    def selectLayer(self, layer):
        return _LayoutScript.cell_selectLayer(self, layer)

    def selectNode(self, node):
        return _LayoutScript.cell_selectNode(self, node)

    def selectNodeOnLayer(self, node, layer):
        return _LayoutScript.cell_selectNodeOnLayer(self, node, layer)

    def selectShapeWithArea(self, min, max):
        return _LayoutScript.cell_selectShapeWithArea(self, min, max)

    def selectText(self, text, layer=-1):
        return _LayoutScript.cell_selectText(self, text, layer)

    def selectTouchingOrOverlapping(self, *args):
        return _LayoutScript.cell_selectTouchingOrOverlapping(self, *args)

    def selectArea(self, minArea, maxArea, layerSource):
        return _LayoutScript.cell_selectArea(self, minArea, maxArea, layerSource)

    def selectDimension(self, minWidth, maxWidth, minLength, maxLength, layerSource):
        return _LayoutScript.cell_selectDimension(
            self, minWidth, maxWidth, minLength, maxLength, layerSource
        )

    def selectRelation(self, layerA, layerB, relation):
        return _LayoutScript.cell_selectRelation(self, layerA, layerB, relation)

    def selectVisible(self):
        return _LayoutScript.cell_selectVisible(self)

    def selectIdentical(self):
        return _LayoutScript.cell_selectIdentical(self)

    def setCapSelect(self, w):
        return _LayoutScript.cell_setCapSelect(self, w)

    def setDatatypeSelect(self, i):
        return _LayoutScript.cell_setDatatypeSelect(self, i)

    def setWidthSelect(self, w):
        return _LayoutScript.cell_setWidthSelect(self, w)

    def sizeAdjustSelect(self, *args):
        return _LayoutScript.cell_sizeAdjustSelect(self, *args)

    def slotSelect(
        self, slotWidth, minSlotLength, maxSlotLength, edgeSpacing, minSlotspacing
    ):
        return _LayoutScript.cell_slotSelect(
            self, slotWidth, minSlotLength, maxSlotLength, edgeSpacing, minSlotspacing
        )

    def snapShapeSelect(self, i):
        return _LayoutScript.cell_snapShapeSelect(self, i)

    def snapPathSelect(self, i):
        return _LayoutScript.cell_snapPathSelect(self, i)

    def stripIdenticalElements(self):
        return _LayoutScript.cell_stripIdenticalElements(self)

    def swapLayer(self, i, k):
        return _LayoutScript.cell_swapLayer(self, i, k)

    def swapLayerSelect(self, i, k):
        return _LayoutScript.cell_swapLayerSelect(self, i, k)

    def sortElements(self, type):
        return _LayoutScript.cell_sortElements(self, type)

    def textDeselect(self):
        return _LayoutScript.cell_textDeselect(self)

    def textSelectVisible(self):
        return _LayoutScript.cell_textSelectVisible(self)

    def textToPolygon(self, defaultWidth):
        return _LayoutScript.cell_textToPolygon(self, defaultWidth)

    def toBox(self):
        return _LayoutScript.cell_toBox(self)

    def toBoxSelect(self):
        return _LayoutScript.cell_toBoxSelect(self)

    def toCircleSelect(self):
        return _LayoutScript.cell_toCircleSelect(self)

    def toLines(self):
        return _LayoutScript.cell_toLines(self)

    def toLinesSelect(self):
        return _LayoutScript.cell_toLinesSelect(self)

    def toMeshSelect(self, width, spaceing):
        return _LayoutScript.cell_toMeshSelect(self, width, spaceing)

    def toPath(self):
        return _LayoutScript.cell_toPath(self)

    def toPathSelect(self):
        return _LayoutScript.cell_toPathSelect(self)

    def toPolygon(self):
        return _LayoutScript.cell_toPolygon(self)

    def toPolygonSelect(self):
        return _LayoutScript.cell_toPolygonSelect(self)

    def triangulateSelect(self, layer):
        return _LayoutScript.cell_triangulateSelect(self, layer)

    def useCell(self, Cell):
        return _LayoutScript.cell_useCell(self, Cell)

    def setPresentationSelect(self, arg2):
        return _LayoutScript.cell_setPresentationSelect(self, arg2)

    def setMirrorxSelect(self):
        return _LayoutScript.cell_setMirrorxSelect(self)

    def toggleMirrorxSelect(self):
        return _LayoutScript.cell_toggleMirrorxSelect(self)

    def clearMirrorxSelect(self):
        return _LayoutScript.cell_clearMirrorxSelect(self)

    def sizeadjustSelect(self, *args):
        return _LayoutScript.cell_sizeadjustSelect(self, *args)

    __swig_destroy__ = _LayoutScript.delete_cell


# Register cell in _LayoutScript:
_LayoutScript.cell_swigregister(cell)


class cell3d(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    firstElement = property(
        _LayoutScript.cell3d_firstElement_get, _LayoutScript.cell3d_firstElement_set
    )
    cellName = property(
        _LayoutScript.cell3d_cellName_get, _LayoutScript.cell3d_cellName_set
    )

    def selectCellref(self, cellname):
        return _LayoutScript.cell3d_selectCellref(self, cellname)

    def selectAll(self):
        return _LayoutScript.cell3d_selectAll(self)

    def invertSelect(self):
        return _LayoutScript.cell3d_invertSelect(self)

    def selectVisible(self):
        return _LayoutScript.cell3d_selectVisible(self)

    def deselectAll(self):
        return _LayoutScript.cell3d_deselectAll(self)

    def meshSelect(self):
        return _LayoutScript.cell3d_meshSelect(self)

    def meshDeselect(self):
        return _LayoutScript.cell3d_meshDeselect(self)

    __swig_destroy__ = _LayoutScript.delete_cell3d


# Register cell3d in _LayoutScript:
_LayoutScript.cell3d_swigregister(cell3d)


class cellList(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    nextCell = property(
        _LayoutScript.cellList_nextCell_get, _LayoutScript.cellList_nextCell_set
    )
    thisCell = property(
        _LayoutScript.cellList_thisCell_get, _LayoutScript.cellList_thisCell_set
    )
    __swig_destroy__ = _LayoutScript.delete_cellList


# Register cellList in _LayoutScript:
_LayoutScript.cellList_swigregister(cellList)


class cellList3d(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    nextCell = property(
        _LayoutScript.cellList3d_nextCell_get, _LayoutScript.cellList3d_nextCell_set
    )
    thisCell = property(
        _LayoutScript.cellList3d_thisCell_get, _LayoutScript.cellList3d_thisCell_set
    )
    __swig_destroy__ = _LayoutScript.delete_cellList3d


# Register cellList3d in _LayoutScript:
_LayoutScript.cellList3d_swigregister(cellList3d)


class component(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    description = property(
        _LayoutScript.component_description_get, _LayoutScript.component_description_set
    )
    label = property(
        _LayoutScript.component_label_get, _LayoutScript.component_label_set
    )
    prefix = property(
        _LayoutScript.component_prefix_get, _LayoutScript.component_prefix_set
    )
    layout = property(
        _LayoutScript.component_layout_get, _LayoutScript.component_layout_set
    )
    extractionMethod = property(
        _LayoutScript.component_extractionMethod_get,
        _LayoutScript.component_extractionMethod_set,
    )
    extractionParameter = property(
        _LayoutScript.component_extractionParameter_get,
        _LayoutScript.component_extractionParameter_set,
    )
    extractionDeviceParameter = property(
        _LayoutScript.component_extractionDeviceParameter_get,
        _LayoutScript.component_extractionDeviceParameter_set,
    )

    def setName(self, arg2):
        return _LayoutScript.component_setName(self, arg2)

    def setLibrary(self, arg2):
        return _LayoutScript.component_setLibrary(self, arg2)

    def getLibrary(self):
        return _LayoutScript.component_getLibrary(self)

    def getName(self):
        return _LayoutScript.component_getName(self)

    def setNameLibrary(self, arg2, arg3):
        return _LayoutScript.component_setNameLibrary(self, arg2, arg3)

    def setSymbol(self, arg2):
        return _LayoutScript.component_setSymbol(self, arg2)

    def getSymbol(self, pos=0):
        return _LayoutScript.component_getSymbol(self, pos)

    def createSymbol(self, nl):
        return _LayoutScript.component_createSymbol(self, nl)

    def setNetlist(self, type, value):
        return _LayoutScript.component_setNetlist(self, type, value)

    def setModel(self, type, value):
        return _LayoutScript.component_setModel(self, type, value)


# Register component in _LayoutScript:
_LayoutScript.component_swigregister(component)


class components(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    @staticmethod
    def findComponent(*args):
        return _LayoutScript.components_findComponent(*args)

    @staticmethod
    def newComponent(*args):
        return _LayoutScript.components_newComponent(*args)

    @staticmethod
    def addLib(filename):
        return _LayoutScript.components_addLib(filename)

    @staticmethod
    def removeLib(filename):
        return _LayoutScript.components_removeLib(filename)

    @staticmethod
    def getLibs():
        return _LayoutScript.components_getLibs()

    @staticmethod
    def getComponents(lib):
        return _LayoutScript.components_getComponents(lib)

    @staticmethod
    def getOaLibs():
        return _LayoutScript.components_getOaLibs()

    @staticmethod
    def getOaCellNames(lib):
        return _LayoutScript.components_getOaCellNames(lib)

    @staticmethod
    def getFilename(lib):
        return _LayoutScript.components_getFilename(lib)

    @staticmethod
    def getPath(lib):
        return _LayoutScript.components_getPath(lib)


# Register components in _LayoutScript:
_LayoutScript.components_swigregister(components)


def components_findComponent(*args):
    return _LayoutScript.components_findComponent(*args)


def components_newComponent(*args):
    return _LayoutScript.components_newComponent(*args)


def components_addLib(filename):
    return _LayoutScript.components_addLib(filename)


def components_removeLib(filename):
    return _LayoutScript.components_removeLib(filename)


def components_getLibs():
    return _LayoutScript.components_getLibs()


def components_getComponents(lib):
    return _LayoutScript.components_getComponents(lib)


def components_getOaLibs():
    return _LayoutScript.components_getOaLibs()


def components_getOaCellNames(lib):
    return _LayoutScript.components_getOaCellNames(lib)


def components_getFilename(lib):
    return _LayoutScript.components_getFilename(lib)


def components_getPath(lib):
    return _LayoutScript.components_getPath(lib)


class console(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    @staticmethod
    def openConsole(app, path, parameter):
        return _LayoutScript.console_openConsole(app, path, parameter)

    @staticmethod
    def exists(app):
        return _LayoutScript.console_exists(app)

    @staticmethod
    def send(app, command):
        return _LayoutScript.console_send(app, command)


# Register console in _LayoutScript:
_LayoutScript.console_swigregister(console)


def console_openConsole(app, path, parameter):
    return _LayoutScript.console_openConsole(app, path, parameter)


def console_exists(app):
    return _LayoutScript.console_exists(app)


def console_send(app, command):
    return _LayoutScript.console_send(app, command)


class drawingField(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    activeLayer = property(
        _LayoutScript.drawingField_activeLayer_get,
        _LayoutScript.drawingField_activeLayer_set,
    )

    def addConvexPolygon(self):
        return _LayoutScript.drawingField_addConvexPolygon(self)

    def addBoundingBox(self):
        return _LayoutScript.drawingField_addBoundingBox(self)

    def addCell(self):
        return _LayoutScript.drawingField_addCell(self)

    def addHierarchy(self, nx, ny):
        return _LayoutScript.drawingField_addHierarchy(self, nx, ny)

    def alignCenterXY(self):
        return _LayoutScript.drawingField_alignCenterXY(self)

    def alignCenterX(self):
        return _LayoutScript.drawingField_alignCenterX(self)

    def alignCenterY(self):
        return _LayoutScript.drawingField_alignCenterY(self)

    def alignLeft(self):
        return _LayoutScript.drawingField_alignLeft(self)

    def alignTop(self):
        return _LayoutScript.drawingField_alignTop(self)

    def alignRight(self):
        return _LayoutScript.drawingField_alignRight(self)

    def alignBottom(self):
        return _LayoutScript.drawingField_alignBottom(self)

    def alignValue(self, dis):
        return _LayoutScript.drawingField_alignValue(self, dis)

    def arc(self):
        return _LayoutScript.drawingField_arc(self)

    def arrayCopy(self, nx, ny):
        return _LayoutScript.drawingField_arrayCopy(self, nx, ny)

    def autoRuler(self, arg2):
        return _LayoutScript.drawingField_autoRuler(self, arg2)

    def bezier2(self):
        return _LayoutScript.drawingField_bezier2(self)

    def bezier3(self):
        return _LayoutScript.drawingField_bezier3(self)

    def boxSelect(self):
        return _LayoutScript.drawingField_boxSelect(self)

    def boxDeselect(self):
        return _LayoutScript.drawingField_boxDeselect(self)

    def box(self):
        return _LayoutScript.drawingField_box(self)

    def BSpline(self):
        return _LayoutScript.drawingField_BSpline(self)

    def cSelect(self):
        return _LayoutScript.drawingField_cSelect(self)

    def cDeselect(self):
        return _LayoutScript.drawingField_cDeselect(self)

    def cellRef(self, s):
        return _LayoutScript.drawingField_cellRef(self, s)

    def cellrefarray(self, s, x, y):
        return _LayoutScript.drawingField_cellrefarray(self, s, x, y)

    def cellUp(self):
        return _LayoutScript.drawingField_cellUp(self)

    def centerXY(self):
        return _LayoutScript.drawingField_centerXY(self)

    def centerX(self):
        return _LayoutScript.drawingField_centerX(self)

    def centerY(self):
        return _LayoutScript.drawingField_centerY(self)

    def circle(self):
        return _LayoutScript.drawingField_circle(self)

    def circleBox(self):
        return _LayoutScript.drawingField_circleBox(self)

    def circleFit(self):
        return _LayoutScript.drawingField_circleFit(self)

    def clearPoints(self):
        return _LayoutScript.drawingField_clearPoints(self)

    def clearMirrorx(self):
        return _LayoutScript.drawingField_clearMirrorx(self)

    def clearProperties(self):
        return _LayoutScript.drawingField_clearProperties(self)

    def closeToPolygon(self):
        return _LayoutScript.drawingField_closeToPolygon(self)

    def closedPathToPolygon(self):
        return _LayoutScript.drawingField_closedPathToPolygon(self)

    def coil(self, turns):
        return _LayoutScript.drawingField_coil(self, turns)

    def compareCell(self, s):
        return _LayoutScript.drawingField_compareCell(self, s)

    def compareCellXor(self, s):
        return _LayoutScript.drawingField_compareCellXor(self, s)

    def copyCurrentCell(self):
        return _LayoutScript.drawingField_copyCurrentCell(self)

    def copy(self):
        return _LayoutScript.drawingField_copy(self)

    def copyArea(self, *args):
        return _LayoutScript.drawingField_copyArea(self, *args)

    def copyDimension(
        self, minWidth, maxwidth, minLength, maxLangth, layerDest, layerSource=-1
    ):
        return _LayoutScript.drawingField_copyDimension(
            self, minWidth, maxwidth, minLength, maxLangth, layerDest, layerSource
        )

    def copyTouching(self, layerA, layerB, layerOutA, layerOutB=-1):
        return _LayoutScript.drawingField_copyTouching(
            self, layerA, layerB, layerOutA, layerOutB
        )

    def copyOverlapping(self, layerA, layerB, layerOutA, layerOutB=-1):
        return _LayoutScript.drawingField_copyOverlapping(
            self, layerA, layerB, layerOutA, layerOutB
        )

    def copyTouchingOrOverlapping(self, layerA, layerB, layerOutA, layerOutB=-1):
        return _LayoutScript.drawingField_copyTouchingOrOverlapping(
            self, layerA, layerB, layerOutA, layerOutB
        )

    def copyLayerToCell(self, layer):
        return _LayoutScript.drawingField_copyLayerToCell(self, layer)

    def copyLayerSized(self, sourcelayer, destinationlayer, size, type):
        return _LayoutScript.drawingField_copyLayerSized(
            self, sourcelayer, destinationlayer, size, type
        )

    def copyLayerSizedAsym(self, sourcelayer, destinationlayer, sizeX, sizeY):
        return _LayoutScript.drawingField_copyLayerSizedAsym(
            self, sourcelayer, destinationlayer, sizeX, sizeY
        )

    def copyLayer(self, sourceLayer, sourceDatatype, destLayer):
        return _LayoutScript.drawingField_copyLayer(
            self, sourceLayer, sourceDatatype, destLayer
        )

    def copyMirror(self):
        return _LayoutScript.drawingField_copyMirror(self)

    def crossSection(self, *args):
        return _LayoutScript.drawingField_crossSection(self, *args)

    currentCell = property(
        _LayoutScript.drawingField_currentCell_get,
        _LayoutScript.drawingField_currentCell_set,
    )

    def cut(self):
        return _LayoutScript.drawingField_cut(self)

    databaseunits = property(
        _LayoutScript.drawingField_databaseunits_get,
        _LayoutScript.drawingField_databaseunits_set,
    )

    def deselectAll(self):
        return _LayoutScript.drawingField_deselectAll(self)

    def deselectActiveLayer(self):
        return _LayoutScript.drawingField_deselectActiveLayer(self)

    def deleteSelect(self):
        return _LayoutScript.drawingField_deleteSelect(self)

    def deleteCell(self, arg2):
        return _LayoutScript.drawingField_deleteCell(self, arg2)

    def deleteActuellCell(self):
        return _LayoutScript.drawingField_deleteActuellCell(self)

    def deleteCurrentCell(self):
        return _LayoutScript.drawingField_deleteCurrentCell(self)

    def deleteAllCell(self):
        return _LayoutScript.drawingField_deleteAllCell(self)

    def dot(self):
        return _LayoutScript.drawingField_dot(self)

    def delPoint(self):
        return _LayoutScript.drawingField_delPoint(self)

    def deleteExceptOneLayer(self, layer):
        return _LayoutScript.drawingField_deleteExceptOneLayer(self, layer)

    def deleteLayer(self, *args):
        return _LayoutScript.drawingField_deleteLayer(self, *args)

    def deleteText(self):
        return _LayoutScript.drawingField_deleteText(self)

    def deleteZeroWidthPath(self):
        return _LayoutScript.drawingField_deleteZeroWidthPath(self)

    def derivedLayer(self, layerA, layerB, resultLayer, operation):
        return _LayoutScript.drawingField_derivedLayer(
            self, layerA, layerB, resultLayer, operation
        )

    def densityFill(self, layer, density, shapeSpace, minWidth, minSpace, frameSize):
        return _LayoutScript.drawingField_densityFill(
            self, layer, density, shapeSpace, minWidth, minSpace, frameSize
        )

    def existCellname(self, s):
        return _LayoutScript.drawingField_existCellname(self, s)

    def ellipse(self):
        return _LayoutScript.drawingField_ellipse(self)

    def extractCurrentCell(self):
        return _LayoutScript.drawingField_extractCurrentCell(self)

    def extractActiveLayer(self):
        return _LayoutScript.drawingField_extractActiveLayer(self)

    def extractLayer(self, layer):
        return _LayoutScript.drawingField_extractLayer(self, layer)

    firstCell = property(
        _LayoutScript.drawingField_firstCell_get,
        _LayoutScript.drawingField_firstCell_set,
    )
    fileType = property(
        _LayoutScript.drawingField_fileType_get, _LayoutScript.drawingField_fileType_set
    )

    def findCell(self, s):
        return _LayoutScript.drawingField_findCell(self, s)

    def findCellRegExp(self, s):
        return _LayoutScript.drawingField_findCellRegExp(self, s)

    def findTopCell(self):
        return _LayoutScript.drawingField_findTopCell(self)

    def flat(self):
        return _LayoutScript.drawingField_flat(self)

    def flatAll(self):
        return _LayoutScript.drawingField_flatAll(self)

    def fillSelectedShapes(self, *args):
        return _LayoutScript.drawingField_fillSelectedShapes(self, *args)

    def fSelect(self):
        return _LayoutScript.drawingField_fSelect(self)

    def fAllSelect(self):
        return _LayoutScript.drawingField_fAllSelect(self)

    def fDeselect(self):
        return _LayoutScript.drawingField_fDeselect(self)

    def fAllDeselect(self):
        return _LayoutScript.drawingField_fAllDeselect(self)

    gridX = property(
        _LayoutScript.drawingField_gridX_get, _LayoutScript.drawingField_gridX_set
    )
    gridY = property(
        _LayoutScript.drawingField_gridY_get, _LayoutScript.drawingField_gridY_set
    )
    gridOffsetX = property(
        _LayoutScript.drawingField_gridOffsetX_get,
        _LayoutScript.drawingField_gridOffsetX_set,
    )
    gridOffsetY = property(
        _LayoutScript.drawingField_gridOffsetY_get,
        _LayoutScript.drawingField_gridOffsetY_set,
    )
    gridMinimum = property(
        _LayoutScript.drawingField_gridMinimum_get,
        _LayoutScript.drawingField_gridMinimum_set,
    )
    gridauto = property(
        _LayoutScript.drawingField_gridauto_get, _LayoutScript.drawingField_gridauto_set
    )

    def getView(self, scale, x, y):
        return _LayoutScript.drawingField_getView(self, scale, x, y)

    def getViewMacro(self):
        return _LayoutScript.drawingField_getViewMacro(self)

    def getPoints(self):
        return _LayoutScript.drawingField_getPoints(self)

    def groupSimple(self):
        return _LayoutScript.drawingField_groupSimple(self)

    def group(self):
        return _LayoutScript.drawingField_group(self)

    def groupStructure(self):
        return _LayoutScript.drawingField_groupStructure(self)

    def groupGlobal(self):
        return _LayoutScript.drawingField_groupGlobal(self)

    def invertSelect(self):
        return _LayoutScript.drawingField_invertSelect(self)

    def importFile(self, s):
        return _LayoutScript.drawingField_importFile(self, s)

    def importViaFile(self, s):
        return _LayoutScript.drawingField_importViaFile(self, s)

    def importView(self, library, cellName, viewName):
        return _LayoutScript.drawingField_importView(self, library, cellName, viewName)

    libname = property(
        _LayoutScript.drawingField_libname_get, _LayoutScript.drawingField_libname_set
    )

    def mergeSelect(self):
        return _LayoutScript.drawingField_mergeSelect(self)

    def move(self):
        return _LayoutScript.drawingField_move(self)

    def moveX(self):
        return _LayoutScript.drawingField_moveX(self)

    def moveY(self):
        return _LayoutScript.drawingField_moveY(self)

    def moveOrigin(self):
        return _LayoutScript.drawingField_moveOrigin(self)

    def mapLayer(self, t):
        return _LayoutScript.drawingField_mapLayer(self, t)

    def mirror(self):
        return _LayoutScript.drawingField_mirror(self)

    def moveLayer(self, sourceLayer, sourceDatatype, destLayer):
        return _LayoutScript.drawingField_moveLayer(
            self, sourceLayer, sourceDatatype, destLayer
        )

    def modified(self):
        return _LayoutScript.drawingField_modified(self)

    def newCell(self):
        return _LayoutScript.drawingField_newCell(self)

    def openFile(self, s):
        return _LayoutScript.drawingField_openFile(self, s)

    def openView(self, library, cellName, viewName):
        return _LayoutScript.drawingField_openView(self, library, cellName, viewName)

    def pSelect(self):
        return _LayoutScript.drawingField_pSelect(self)

    def pDeselect(self):
        return _LayoutScript.drawingField_pDeselect(self)

    def pathSelect(self):
        return _LayoutScript.drawingField_pathSelect(self)

    def pathDeselect(self):
        return _LayoutScript.drawingField_pathDeselect(self)

    def polygonSelect(self):
        return _LayoutScript.drawingField_polygonSelect(self)

    def polygonDeselect(self):
        return _LayoutScript.drawingField_polygonDeselect(self)

    previousCell = property(
        _LayoutScript.drawingField_previousCell_get,
        _LayoutScript.drawingField_previousCell_set,
    )

    def prepareUndo(self):
        return _LayoutScript.drawingField_prepareUndo(self)

    def p(self, x, y):
        return _LayoutScript.drawingField_p(self, x, y)

    def pRel(self, x, y):
        return _LayoutScript.drawingField_pRel(self, x, y)

    def pDir(self, length, dir):
        return _LayoutScript.drawingField_pDir(self, length, dir)

    def pMove(self, x, y):
        return _LayoutScript.drawingField_pMove(self, x, y)

    def pointMove(self, *args):
        return _LayoutScript.drawingField_pointMove(self, *args)

    def polygon(self):
        return _LayoutScript.drawingField_polygon(self)

    def path(self):
        return _LayoutScript.drawingField_path(self)

    def polygonArc(self):
        return _LayoutScript.drawingField_polygonArc(self)

    def point(self, *args):
        return _LayoutScript.drawingField_point(self, *args)

    def pointRel(self, *args):
        return _LayoutScript.drawingField_pointRel(self, *args)

    def removeCellArrays(self):
        return _LayoutScript.drawingField_removeCellArrays(self)

    def removeRotatedCellArrays(self):
        return _LayoutScript.drawingField_removeRotatedCellArrays(self)

    def removeNotOrthogonalCellref(self):
        return _LayoutScript.drawingField_removeNotOrthogonalCellref(self)

    def removeScaledCellref(self):
        return _LayoutScript.drawingField_removeScaledCellref(self)

    def removeOverlap(self, *args):
        return _LayoutScript.drawingField_removeOverlap(self, *args)

    def rotate(self, angle):
        return _LayoutScript.drawingField_rotate(self, angle)

    def relink(self, cell):
        return _LayoutScript.drawingField_relink(self, cell)

    def redo(self):
        return _LayoutScript.drawingField_redo(self)

    def resetUndo(self):
        return _LayoutScript.drawingField_resetUndo(self)

    def spiral(self):
        return _LayoutScript.drawingField_spiral(self)

    def selectAll(self):
        return _LayoutScript.drawingField_selectAll(self)

    def selectVisible(self):
        return _LayoutScript.drawingField_selectVisible(self)

    def selectActiveLayer(self):
        return _LayoutScript.drawingField_selectActiveLayer(self)

    def scale(self, *args):
        return _LayoutScript.drawingField_scale(self, *args)

    def setWidth(self, w):
        return _LayoutScript.drawingField_setWidth(self, w)

    def setCap(self, w):
        return _LayoutScript.drawingField_setCap(self, w)

    def stripUnneeded(self):
        return _LayoutScript.drawingField_stripUnneeded(self)

    def stripIdenticalElements(self):
        return _LayoutScript.drawingField_stripIdenticalElements(self)

    def stripEmptyCells(self):
        return _LayoutScript.drawingField_stripEmptyCells(self)

    def sizeLayer(self, layer, size):
        return _LayoutScript.drawingField_sizeLayer(self, layer, size)

    def selectText(self, textname):
        return _LayoutScript.drawingField_selectText(self, textname)

    def selectCellref(self, cellname):
        return _LayoutScript.drawingField_selectCellref(self, cellname)

    def setGrid(self, raster):
        return _LayoutScript.drawingField_setGrid(self, raster)

    def setCell(self, *args):
        return _LayoutScript.drawingField_setCell(self, *args)

    def scaledCell(self, c, sx, sy):
        return _LayoutScript.drawingField_scaledCell(self, c, sx, sy)

    def scalePlus(self):
        return _LayoutScript.drawingField_scalePlus(self)

    def scaleMinus(self):
        return _LayoutScript.drawingField_scaleMinus(self)

    def scaleFull(self):
        return _LayoutScript.drawingField_scaleFull(self)

    def scaleSelect(self):
        return _LayoutScript.drawingField_scaleSelect(self)

    def scaleEins(self):
        return _LayoutScript.drawingField_scaleEins(self)

    def scrollLeft(self):
        return _LayoutScript.drawingField_scrollLeft(self)

    def scrollRight(self):
        return _LayoutScript.drawingField_scrollRight(self)

    def scrollUp(self):
        return _LayoutScript.drawingField_scrollUp(self)

    def scrollDown(self):
        return _LayoutScript.drawingField_scrollDown(self)

    def setView(self, scale, x, y):
        return _LayoutScript.drawingField_setView(self, scale, x, y)

    def showGridToggle(self):
        return _LayoutScript.drawingField_showGridToggle(self)

    def setAutoGrid(self):
        return _LayoutScript.drawingField_setAutoGrid(self)

    def saveFile(self, s):
        return _LayoutScript.drawingField_saveFile(self, s)

    def sector(self):
        return _LayoutScript.drawingField_sector(self)

    def searchPattern(self):
        return _LayoutScript.drawingField_searchPattern(self)

    def swapLayer(self, i, k):
        return _LayoutScript.drawingField_swapLayer(self, i, k)

    def swapLayerSelect(self, i, k):
        return _LayoutScript.drawingField_swapLayerSelect(self, i, k)

    def swapLayerAll(self, i, k):
        return _LayoutScript.drawingField_swapLayerAll(self, i, k)

    def saveLayer(self, fileName, layer):
        return _LayoutScript.drawingField_saveLayer(self, fileName, layer)

    def saveScreenshot(self, filename):
        return _LayoutScript.drawingField_saveScreenshot(self, filename)

    def setModifyChanged(self):
        return _LayoutScript.drawingField_setModifyChanged(self)

    def setModifyAdded(self):
        return _LayoutScript.drawingField_setModifyAdded(self)

    def setModifySaved(self):
        return _LayoutScript.drawingField_setModifySaved(self)

    def separateLayer(self, arg2, layer):
        return _LayoutScript.drawingField_separateLayer(self, arg2, layer)

    def setPresentation(self, arg2):
        return _LayoutScript.drawingField_setPresentation(self, arg2)

    def setMirrorx(self):
        return _LayoutScript.drawingField_setMirrorx(self)

    def textSelect(self):
        return _LayoutScript.drawingField_textSelect(self)

    def textDeselect(self):
        return _LayoutScript.drawingField_textDeselect(self)

    def text(self, s):
        return _LayoutScript.drawingField_text(self, s)

    def toBox(self):
        return _LayoutScript.drawingField_toBox(self)

    def toPolygon(self):
        return _LayoutScript.drawingField_toPolygon(self)

    def toPath(self):
        return _LayoutScript.drawingField_toPath(self)

    def toCircle(self):
        return _LayoutScript.drawingField_toCircle(self)

    def toLines(self):
        return _LayoutScript.drawingField_toLines(self)

    def toggleMirrorx(self):
        return _LayoutScript.drawingField_toggleMirrorx(self)

    def undo(self):
        return _LayoutScript.drawingField_undo(self)

    def updateFile(self, s):
        return _LayoutScript.drawingField_updateFile(self, s)

    userunits = property(
        _LayoutScript.drawingField_userunits_get,
        _LayoutScript.drawingField_userunits_set,
    )

    def useLayer(self, layer):
        return _LayoutScript.drawingField_useLayer(self, layer)

    def unusedLayer(self, startLayer):
        return _LayoutScript.drawingField_unusedLayer(self, startLayer)

    __swig_destroy__ = _LayoutScript.delete_drawingField


# Register drawingField in _LayoutScript:
_LayoutScript.drawingField_swigregister(drawingField)


class drawingField3d(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def addCell(self):
        return _LayoutScript.drawingField3d_addCell(self)

    def deleteAllCell(self):
        return _LayoutScript.drawingField3d_deleteAllCell(self)

    def isEmpty(self):
        return _LayoutScript.drawingField3d_isEmpty(self)

    databaseunits = property(
        _LayoutScript.drawingField3d_databaseunits_get,
        _LayoutScript.drawingField3d_databaseunits_set,
    )
    userunits = property(
        _LayoutScript.drawingField3d_userunits_get,
        _LayoutScript.drawingField3d_userunits_set,
    )
    showOrigin = property(
        _LayoutScript.drawingField3d_showOrigin_get,
        _LayoutScript.drawingField3d_showOrigin_set,
    )
    zScale = property(
        _LayoutScript.drawingField3d_zScale_get, _LayoutScript.drawingField3d_zScale_set
    )
    currentCell = property(
        _LayoutScript.drawingField3d_currentCell_get,
        _LayoutScript.drawingField3d_currentCell_set,
    )
    firstCell = property(
        _LayoutScript.drawingField3d_firstCell_get,
        _LayoutScript.drawingField3d_firstCell_set,
    )

    def showOriginToggle(self):
        return _LayoutScript.drawingField3d_showOriginToggle(self)

    def scaleFull(self):
        return _LayoutScript.drawingField3d_scaleFull(self)

    def modified(self):
        return _LayoutScript.drawingField3d_modified(self)

    def setModifyChanged(self):
        return _LayoutScript.drawingField3d_setModifyChanged(self)

    def setModifyAdded(self):
        return _LayoutScript.drawingField3d_setModifyAdded(self)

    def setModifySaved(self):
        return _LayoutScript.drawingField3d_setModifySaved(self)

    def selectAll(self):
        return _LayoutScript.drawingField3d_selectAll(self)

    def selectVisible(self):
        return _LayoutScript.drawingField3d_selectVisible(self)

    def deselectAll(self):
        return _LayoutScript.drawingField3d_deselectAll(self)

    def meshSelect(self):
        return _LayoutScript.drawingField3d_meshSelect(self)

    def meshDeselect(self):
        return _LayoutScript.drawingField3d_meshDeselect(self)

    def invertSelect(self):
        return _LayoutScript.drawingField3d_invertSelect(self)

    def openFile(self, filename):
        return _LayoutScript.drawingField3d_openFile(self, filename)

    def saveFile(self, filename):
        return _LayoutScript.drawingField3d_saveFile(self, filename)

    __swig_destroy__ = _LayoutScript.delete_drawingField3d


# Register drawingField3d in _LayoutScript:
_LayoutScript.drawingField3d_swigregister(drawingField3d)


class doubleList(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self):
        _LayoutScript.doubleList_swiginit(self, _LayoutScript.new_doubleList())

    def append(self, d):
        return _LayoutScript.doubleList_append(self, d)

    def at(self, i):
        return _LayoutScript.doubleList_at(self, i)

    def clear(self):
        return _LayoutScript.doubleList_clear(self)

    def contains(self, d):
        return _LayoutScript.doubleList_contains(self, d)

    def insert(self, pos, value):
        return _LayoutScript.doubleList_insert(self, pos, value)

    def indexOf(self, i, index=0):
        return _LayoutScript.doubleList_indexOf(self, i, index)

    def removeAll(self, d):
        return _LayoutScript.doubleList_removeAll(self, d)

    def removeAt(self, pos):
        return _LayoutScript.doubleList_removeAt(self, pos)

    def size(self):
        return _LayoutScript.doubleList_size(self)

    def set(self, i, d):
        return _LayoutScript.doubleList_set(self, i, d)

    def swap(self, pos1, pos2):
        return _LayoutScript.doubleList_swap(self, pos1, pos2)

    __swig_destroy__ = _LayoutScript.delete_doubleList


# Register doubleList in _LayoutScript:
_LayoutScript.doubleList_swigregister(doubleList)


class drc(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def addViolation(self, name, value, p1, p2, type=0, status=0):
        return _LayoutScript.drc_addViolation(self, name, value, p1, p2, type, status)

    def angle90OnLayer(self, layer, mergeBefore=False):
        return _LayoutScript.drc_angle90OnLayer(self, layer, mergeBefore)

    def angle45OnLayer(self, layer, mergeBefore=False):
        return _LayoutScript.drc_angle45OnLayer(self, layer, mergeBefore)

    def circleRadiusOnLayer(self, min, max, layer):
        return _LayoutScript.drc_circleRadiusOnLayer(self, min, max, layer)

    def clearDRC(self):
        return _LayoutScript.drc_clearDRC(self)

    def clearViolationView(self):
        return _LayoutScript.drc_clearViolationView(self)

    def densityOnLayer(self, layer, box, min, max):
        return _LayoutScript.drc_densityOnLayer(self, layer, box, min, max)

    def dimensionOnLayer(
        self, lengthMin, lengthMax, widthMin, widthMax, layer, mergeBefore=False
    ):
        return _LayoutScript.drc_dimensionOnLayer(
            self, lengthMin, lengthMax, widthMin, widthMax, layer, mergeBefore
        )

    errorLayer = property(
        _LayoutScript.drc_errorLayer_get, _LayoutScript.drc_errorLayer_set
    )
    errorCount = property(
        _LayoutScript.drc_errorCount_get, _LayoutScript.drc_errorCount_set
    )
    error = property(_LayoutScript.drc_error_get, _LayoutScript.drc_error_set)

    def exactDimensionOnLayer(self, length, width, layer, mergeBefore=False):
        return _LayoutScript.drc_exactDimensionOnLayer(
            self, length, width, layer, mergeBefore
        )

    def exactInside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_exactInside(
            self, distance, insideLayer, layer1, layer2, layer3
        )

    def getReport(self):
        return _LayoutScript.drc_getReport(self)

    def getViolationName(self, index):
        return _LayoutScript.drc_getViolationName(self, index)

    def getViolationValue(self, index):
        return _LayoutScript.drc_getViolationValue(self, index)

    def getViolationStatus(self, index):
        return _LayoutScript.drc_getViolationStatus(self, index)

    def getViolationType(self, index):
        return _LayoutScript.drc_getViolationType(self, index)

    def getViolationPoint1(self, index):
        return _LayoutScript.drc_getViolationPoint1(self, index)

    def getViolationPoint2(self, index):
        return _LayoutScript.drc_getViolationPoint2(self, index)

    def inside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_inside(
            self, distance, insideLayer, layer1, layer2, layer3
        )

    def layerCombination(self, layer1, layer2, layer3=-1, layer4=-1, layer5=-1):
        return _LayoutScript.drc_layerCombination(
            self, layer1, layer2, layer3, layer4, layer5
        )

    def loadViolationList(self, filename):
        return _LayoutScript.drc_loadViolationList(self, filename)

    def maximumAreaOnLayer(self, layer, areavalue, mergeBefore=False):
        return _LayoutScript.drc_maximumAreaOnLayer(self, layer, areavalue, mergeBefore)

    def maximumAngleOnLayer(self, anglevalue, layer, mergeBefore=False):
        return _LayoutScript.drc_maximumAngleOnLayer(
            self, anglevalue, layer, mergeBefore
        )

    def minimumAngleOnLayer(self, anglevalue, layer, mergeBefore=False):
        return _LayoutScript.drc_minimumAngleOnLayer(
            self, anglevalue, layer, mergeBefore
        )

    def maximumDimensionOnLayer(self, length, width, layer, mergeBefore=False):
        return _LayoutScript.drc_maximumDimensionOnLayer(
            self, length, width, layer, mergeBefore
        )

    def maximumDistance(self, distance, layer1, layer2):
        return _LayoutScript.drc_maximumDistance(self, distance, layer1, layer2)

    def maximumInside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_maximumInside(
            self, distance, insideLayer, layer1, layer2, layer3
        )

    def maximumInaccessibilityOnLayer(self, layer, inaccessibility, mergeBefore=False):
        return _LayoutScript.drc_maximumInaccessibilityOnLayer(
            self, layer, inaccessibility, mergeBefore
        )

    def maximumPerimeterOnLayer(self, layer, perimeter, mergeBefore=False):
        return _LayoutScript.drc_maximumPerimeterOnLayer(
            self, layer, perimeter, mergeBefore
        )

    def minimumAreaOnLayer(self, layer, areavalue, mergeBefore=False):
        return _LayoutScript.drc_minimumAreaOnLayer(self, layer, areavalue, mergeBefore)

    def minimumDimensionOnLayer(self, length, width, layer, mergeBefore=False):
        return _LayoutScript.drc_minimumDimensionOnLayer(
            self, length, width, layer, mergeBefore
        )

    def minimumDistance(self, distance, layer1, layer2):
        return _LayoutScript.drc_minimumDistance(self, distance, layer1, layer2)

    def minimumDistanceOrOverlap(self, distance, layer1, layer2, mode=True):
        return _LayoutScript.drc_minimumDistanceOrOverlap(
            self, distance, layer1, layer2, mode
        )

    def minimumElementDistance(self, distance, layer, mergeBefore=False):
        return _LayoutScript.drc_minimumElementDistance(
            self, distance, layer, mergeBefore
        )

    def minimumElementDistanceOnActiveLayer(self, distance):
        return _LayoutScript.drc_minimumElementDistanceOnActiveLayer(self, distance)

    def minimumEnclosure(self, distance, layer1, layer2):
        return _LayoutScript.drc_minimumEnclosure(self, distance, layer1, layer2)

    def minimumInaccessibilityOnLayer(self, layer, inaccessibility, mergeBefore=False):
        return _LayoutScript.drc_minimumInaccessibilityOnLayer(
            self, layer, inaccessibility, mergeBefore
        )

    def minimumInside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_minimumInside(
            self, distance, insideLayer, layer1, layer2, layer3
        )

    def minimumInsideOrOutside(
        self, distance, insideLayer, layer1, layer2=-1, layer3=-1
    ):
        return _LayoutScript.drc_minimumInsideOrOutside(
            self, distance, insideLayer, layer1, layer2, layer3
        )

    def minimumNotchOnLayer(self, notchsize, layer, mergeBefore=False, testSlots=False):
        return _LayoutScript.drc_minimumNotchOnLayer(
            self, notchsize, layer, mergeBefore, testSlots
        )

    def minimumEdgeLengthOnLayer(self, notchsize, layer):
        return _LayoutScript.drc_minimumEdgeLengthOnLayer(self, notchsize, layer)

    def minimumOverlap(self, overlap, layer1, layer2):
        return _LayoutScript.drc_minimumOverlap(self, overlap, layer1, layer2)

    def minimumOverlapDistance(self, distance, layer1, layer2):
        return _LayoutScript.drc_minimumOverlapDistance(self, distance, layer1, layer2)

    def minimumPerimeterOnLayer(self, layer, perimetervalue, mergeBefore=False):
        return _LayoutScript.drc_minimumPerimeterOnLayer(
            self, layer, perimetervalue, mergeBefore
        )

    def minimumSize(self, size, layer, mergeBefore=False, sharpAngles=True):
        return _LayoutScript.drc_minimumSize(
            self, size, layer, mergeBefore, sharpAngles
        )

    def noBoxOnLayer(self, layer):
        return _LayoutScript.drc_noBoxOnLayer(self, layer)

    def noBoxOnActiveLayer(self):
        return _LayoutScript.drc_noBoxOnActiveLayer(self)

    def noCircleOnLayer(self, layer):
        return _LayoutScript.drc_noCircleOnLayer(self, layer)

    def noCircleOnActiveLayer(self):
        return _LayoutScript.drc_noCircleOnActiveLayer(self)

    def noElementOnLayer(self, layer):
        return _LayoutScript.drc_noElementOnLayer(self, layer)

    def noElementOnActiveLayer(self):
        return _LayoutScript.drc_noElementOnActiveLayer(self)

    def noPathOnLayer(self, layer):
        return _LayoutScript.drc_noPathOnLayer(self, layer)

    def noPathOnActiveLayer(self):
        return _LayoutScript.drc_noPathOnActiveLayer(self)

    def noHolesOnLayer(self, layer, mergeBefore=False):
        return _LayoutScript.drc_noHolesOnLayer(self, layer, mergeBefore)

    def noPolygonOnLayer(self, layer):
        return _LayoutScript.drc_noPolygonOnLayer(self, layer)

    def noPolygonOnActiveLayer(self):
        return _LayoutScript.drc_noPolygonOnActiveLayer(self)

    def noSelfintersectionOnActiveLayer(self):
        return _LayoutScript.drc_noSelfintersectionOnActiveLayer(self)

    def noSelfintersectionOnLayer(self, layer):
        return _LayoutScript.drc_noSelfintersectionOnLayer(self, layer)

    def noSpikesOnLayer(self, layer, sharpAngles=False):
        return _LayoutScript.drc_noSpikesOnLayer(self, layer, sharpAngles)

    def noTextOnLayer(self, layer):
        return _LayoutScript.drc_noTextOnLayer(self, layer)

    def noTextOnActiveLayer(self):
        return _LayoutScript.drc_noTextOnActiveLayer(self)

    def noZeroWidthOnLayer(self, layer):
        return _LayoutScript.drc_noZeroWidthOnLayer(self, layer)

    def noZeroWidthOnActiveLayer(self):
        return _LayoutScript.drc_noZeroWidthOnActiveLayer(self)

    def onGrid(self, grid, layer):
        return _LayoutScript.drc_onGrid(self, grid, layer)

    def onlyCircleOnLayer(self, layer):
        return _LayoutScript.drc_onlyCircleOnLayer(self, layer)

    def onlyCircleOnActiveLayer(self):
        return _LayoutScript.drc_onlyCircleOnActiveLayer(self)

    def onlyRectangleOnActiveLayer(self):
        return _LayoutScript.drc_onlyRectangleOnActiveLayer(self)

    def onlyRectangleOnLayer(self, layer):
        return _LayoutScript.drc_onlyRectangleOnLayer(self, layer)

    def overlappingElements(self, layer):
        return _LayoutScript.drc_overlappingElements(self, layer)

    def overlappingElementsOnActiveLayer(self):
        return _LayoutScript.drc_overlappingElementsOnActiveLayer(self)

    ruleName = property(_LayoutScript.drc_ruleName_get, _LayoutScript.drc_ruleName_set)
    result = property(_LayoutScript.drc_result_get, _LayoutScript.drc_result_set)

    def removeNoDrcViolations(self, layer):
        return _LayoutScript.drc_removeNoDrcViolations(self, layer)

    def saveViolationList(self, filename):
        return _LayoutScript.drc_saveViolationList(self, filename)

    def setCheckCell(self):
        return _LayoutScript.drc_setCheckCell(self)

    def setCheckRegion(self, arg2, arg3):
        return _LayoutScript.drc_setCheckRegion(self, arg2, arg3)

    def setCheckView(self):
        return _LayoutScript.drc_setCheckView(self)

    def setErrorLayerToActiveLayer(self):
        return _LayoutScript.drc_setErrorLayerToActiveLayer(self)

    def setList(self, arg2):
        return _LayoutScript.drc_setList(self, arg2)

    def setGraphical(self, arg2):
        return _LayoutScript.drc_setGraphical(self, arg2)

    def setRegionMode(self):
        return _LayoutScript.drc_setRegionMode(self)

    def showReport(self):
        return _LayoutScript.drc_showReport(self)

    def widthDependentDistance(self, distance, width, layer, mergeBefore=False):
        return _LayoutScript.drc_widthDependentDistance(
            self, distance, width, layer, mergeBefore
        )

    def isCheckedList(self):
        return _LayoutScript.drc_isCheckedList(self)

    def isCheckedGraphical(self):
        return _LayoutScript.drc_isCheckedGraphical(self)

    def addViolationGraphical(self, p):
        return _LayoutScript.drc_addViolationGraphical(self, p)

    def overlapingElements(self, layer):
        return _LayoutScript.drc_overlapingElements(self, layer)

    def overlapingElementsOnActiveLayer(self):
        return _LayoutScript.drc_overlapingElementsOnActiveLayer(self)

    __swig_destroy__ = _LayoutScript.delete_drc


# Register drc in _LayoutScript:
_LayoutScript.drc_swigregister(drc)


class element(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    layerNum = property(
        _LayoutScript.element_layerNum_get, _LayoutScript.element_layerNum_set
    )

    def clearMirrorx(self):
        return _LayoutScript.element_clearMirrorx(self)

    def clearProperties(self):
        return _LayoutScript.element_clearProperties(self)

    datatype = property(
        _LayoutScript.element_datatype_get, _LayoutScript.element_datatype_set
    )

    def depend(self):
        return _LayoutScript.element_depend(self)

    def deselectAll(self):
        return _LayoutScript.element_deselectAll(self)

    def deleteSelect(self):
        return _LayoutScript.element_deleteSelect(self)

    def getBoundingBox(self):
        return _LayoutScript.element_getBoundingBox(self)

    def getCap(self):
        return _LayoutScript.element_getCap(self)

    def getDatatype(self):
        return _LayoutScript.element_getDatatype(self)

    def getName(self):
        return _LayoutScript.element_getName(self)

    def getNx(self):
        return _LayoutScript.element_getNx(self)

    def getNy(self):
        return _LayoutScript.element_getNy(self)

    def getPoints(self):
        return _LayoutScript.element_getPoints(self)

    def getSelectedPoints(self):
        return _LayoutScript.element_getSelectedPoints(self)

    def getPropertyString(self, *args):
        return _LayoutScript.element_getPropertyString(self, *args)

    def getPresentation(self):
        return _LayoutScript.element_getPresentation(self)

    def getTrans(self):
        return _LayoutScript.element_getTrans(self)

    def getWidth(self):
        return _LayoutScript.element_getWidth(self)

    def invertSelect(self):
        return _LayoutScript.element_invertSelect(self)

    def isBox(self):
        return _LayoutScript.element_isBox(self)

    def isCellref(self):
        return _LayoutScript.element_isCellref(self)

    def isCellrefArray(self):
        return _LayoutScript.element_isCellrefArray(self)

    def isCircle(self, *args):
        return _LayoutScript.element_isCircle(self, *args)

    def isCircleList(self, arg2):
        return _LayoutScript.element_isCircleList(self, arg2)

    def isPath(self):
        return _LayoutScript.element_isPath(self)

    def isPolygon(self):
        return _LayoutScript.element_isPolygon(self)

    def isRaithMBMSPath(self):
        return _LayoutScript.element_isRaithMBMSPath(self)

    def isText(self):
        return _LayoutScript.element_isText(self)

    def isRectangle(self):
        return _LayoutScript.element_isRectangle(self)

    def isSquare(self):
        return _LayoutScript.element_isSquare(self)

    def isShape(self):
        return _LayoutScript.element_isShape(self)

    def maximum(self, *args):
        return _LayoutScript.element_maximum(self, *args)

    def maximumSelect(self, *args):
        return _LayoutScript.element_maximumSelect(self, *args)

    def minimum(self, *args):
        return _LayoutScript.element_minimum(self, *args)

    def minimumSelect(self, *args):
        return _LayoutScript.element_minimumSelect(self, *args)

    def replaceText(self, arg2, arg3):
        return _LayoutScript.element_replaceText(self, arg2, arg3)

    def rotate(self, arg2):
        return _LayoutScript.element_rotate(self, arg2)

    def scale(self, arg2):
        return _LayoutScript.element_scale(self, arg2)

    select = property(
        _LayoutScript.element_select_get, _LayoutScript.element_select_set
    )

    def selectAll(self):
        return _LayoutScript.element_selectAll(self)

    def selectDatatype(self, t):
        return _LayoutScript.element_selectDatatype(self, t)

    def selectVisible(self):
        return _LayoutScript.element_selectVisible(self)

    def setCap(self, cap):
        return _LayoutScript.element_setCap(self, cap)

    def setCellRef(self, arg2):
        return _LayoutScript.element_setCellRef(self, arg2)

    def setDatatype(self, t):
        return _LayoutScript.element_setDatatype(self, t)

    def setDatatypeSelect(self, t):
        return _LayoutScript.element_setDatatypeSelect(self, t)

    def setMirrorx(self):
        return _LayoutScript.element_setMirrorx(self)

    def setName(self, arg2):
        return _LayoutScript.element_setName(self, arg2)

    def setNx(self, arg2):
        return _LayoutScript.element_setNx(self, arg2)

    def setNy(self, arg2):
        return _LayoutScript.element_setNy(self, arg2)

    def setPoints(self, arg2):
        return _LayoutScript.element_setPoints(self, arg2)

    def setPresentation(self, arg2):
        return _LayoutScript.element_setPresentation(self, arg2)

    def setPropertyString(self, *args):
        return _LayoutScript.element_setPropertyString(self, *args)

    def setTrans(self, arg2):
        return _LayoutScript.element_setTrans(self, arg2)

    def setWidth(self, width):
        return _LayoutScript.element_setWidth(self, width)

    def toggleMirrorx(self):
        return _LayoutScript.element_toggleMirrorx(self)

    def decodeRaithPxxDataList(self):
        return _LayoutScript.element_decodeRaithPxxDataList(self)

    def decodeRaithPxxData(self, v1, v2, v3, v4, v5, v6, v7):
        return _LayoutScript.element_decodeRaithPxxData(
            self, v1, v2, v3, v4, v5, v6, v7
        )

    def encodeRaithPxxData(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _LayoutScript.element_encodeRaithPxxData(
            self, arg2, arg3, arg4, arg5, arg6, arg7, arg8
        )

    def setRaithDosis(self, arg2):
        return _LayoutScript.element_setRaithDosis(self, arg2)

    def getRaithDosis(self):
        return _LayoutScript.element_getRaithDosis(self)

    @staticmethod
    def angle(*args):
        return _LayoutScript.element_angle(*args)

    @staticmethod
    def distance(*args):
        return _LayoutScript.element_distance(*args)

    @staticmethod
    def round(d):
        return _LayoutScript.element_round(d)

    __swig_destroy__ = _LayoutScript.delete_element


# Register element in _LayoutScript:
_LayoutScript.element_swigregister(element)


def element_angle(*args):
    return _LayoutScript.element_angle(*args)


def element_distance(*args):
    return _LayoutScript.element_distance(*args)


def element_round(d):
    return _LayoutScript.element_round(d)


class element3d(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    visible = property(
        _LayoutScript.element3d_visible_get, _LayoutScript.element3d_visible_set
    )
    select = property(
        _LayoutScript.element3d_select_get, _LayoutScript.element3d_select_set
    )

    def isCellref(self):
        return _LayoutScript.element3d_isCellref(self)

    def isMesh(self):
        return _LayoutScript.element3d_isMesh(self)

    def selectAll(self):
        return _LayoutScript.element3d_selectAll(self)

    def deselectAll(self):
        return _LayoutScript.element3d_deselectAll(self)

    def getLayer(self):
        return _LayoutScript.element3d_getLayer(self)

    def setLayer(self, arg2):
        return _LayoutScript.element3d_setLayer(self, arg2)

    def isVisible(self):
        return _LayoutScript.element3d_isVisible(self)

    def getColorRed(self):
        return _LayoutScript.element3d_getColorRed(self)

    def getColorGreen(self):
        return _LayoutScript.element3d_getColorGreen(self)

    def getColorBlue(self):
        return _LayoutScript.element3d_getColorBlue(self)

    def getName(self):
        return _LayoutScript.element3d_getName(self)

    def setName(self, arg2):
        return _LayoutScript.element3d_setName(self, arg2)

    __swig_destroy__ = _LayoutScript.delete_element3d


# Register element3d in _LayoutScript:
_LayoutScript.element3d_swigregister(element3d)


class elementList(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    thisElement = property(
        _LayoutScript.elementList_thisElement_get,
        _LayoutScript.elementList_thisElement_set,
    )
    nextElement = property(
        _LayoutScript.elementList_nextElement_get,
        _LayoutScript.elementList_nextElement_set,
    )

    def firstOnLayer(self, layer):
        return _LayoutScript.elementList_firstOnLayer(self, layer)

    def nextOnLayer(self, layer):
        return _LayoutScript.elementList_nextOnLayer(self, layer)

    __swig_destroy__ = _LayoutScript.delete_elementList


# Register elementList in _LayoutScript:
_LayoutScript.elementList_swigregister(elementList)


class elementList3d(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    nextElement = property(
        _LayoutScript.elementList3d_nextElement_get,
        _LayoutScript.elementList3d_nextElement_set,
    )
    thisElement = property(
        _LayoutScript.elementList3d_thisElement_get,
        _LayoutScript.elementList3d_thisElement_set,
    )
    __swig_destroy__ = _LayoutScript.delete_elementList3d


# Register elementList3d in _LayoutScript:
_LayoutScript.elementList3d_swigregister(elementList3d)


class extractionModule(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def calcResistance(self, p, port1, port2):
        return _LayoutScript.extractionModule_calcResistance(self, p, port1, port2)

    def extractComponent(self, comp, lib):
        return _LayoutScript.extractionModule_extractComponent(self, comp, lib)

    def removeExtractedDevices(self):
        return _LayoutScript.extractionModule_removeExtractedDevices(self)

    def setDetailsResistance(self, arg2):
        return _LayoutScript.extractionModule_setDetailsResistance(self, arg2)

    def inductanceAddSelection(self):
        return _LayoutScript.extractionModule_inductanceAddSelection(self)

    def inductanceAdd(self, e, conductorNum):
        return _LayoutScript.extractionModule_inductanceAdd(self, e, conductorNum)

    def inductanceClear(self):
        return _LayoutScript.extractionModule_inductanceClear(self)

    def inductanceCalc(self, frequency=1000000):
        return _LayoutScript.extractionModule_inductanceCalc(self, frequency)

    def inductanceResult(self, con1, con2):
        return _LayoutScript.extractionModule_inductanceResult(self, con1, con2)

    __swig_destroy__ = _LayoutScript.delete_extractionModule


# Register extractionModule in _LayoutScript:
_LayoutScript.extractionModule_swigregister(extractionModule)


class intList(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self):
        _LayoutScript.intList_swiginit(self, _LayoutScript.new_intList())

    def append(self, d):
        return _LayoutScript.intList_append(self, d)

    def at(self, i):
        return _LayoutScript.intList_at(self, i)

    def clear(self):
        return _LayoutScript.intList_clear(self)

    def contains(self, d):
        return _LayoutScript.intList_contains(self, d)

    def insert(self, pos, value):
        return _LayoutScript.intList_insert(self, pos, value)

    def indexOf(self, i, index=0):
        return _LayoutScript.intList_indexOf(self, i, index)

    def removeAll(self, d):
        return _LayoutScript.intList_removeAll(self, d)

    def removeAt(self, pos):
        return _LayoutScript.intList_removeAt(self, pos)

    def size(self):
        return _LayoutScript.intList_size(self)

    def set(self, i, d):
        return _LayoutScript.intList_set(self, i, d)

    def swap(self, pos1, pos2):
        return _LayoutScript.intList_swap(self, pos1, pos2)

    __swig_destroy__ = _LayoutScript.delete_intList


# Register intList in _LayoutScript:
_LayoutScript.intList_swigregister(intList)


class layer(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    name = property(_LayoutScript.layer_name_get, _LayoutScript.layer_name_set)
    visible = property(_LayoutScript.layer_visible_get, _LayoutScript.layer_visible_set)

    def set3dView(self, level, thickness):
        return _LayoutScript.layer_set3dView(self, level, thickness)

    def get3dLevel(self):
        return _LayoutScript.layer_get3dLevel(self)

    def get3dThickness(self):
        return _LayoutScript.layer_get3dThickness(self)

    def enable(self):
        return _LayoutScript.layer_enable(self)

    def disable(self):
        return _LayoutScript.layer_disable(self)

    def setColor(self, *args):
        return _LayoutScript.layer_setColor(self, *args)

    def red(self):
        return _LayoutScript.layer_red(self)

    def green(self):
        return _LayoutScript.layer_green(self)

    def blue(self):
        return _LayoutScript.layer_blue(self)

    def setStyle(self, style):
        return _LayoutScript.layer_setStyle(self, style)

    def getStyle(self):
        return _LayoutScript.layer_getStyle(self)

    shortkey = property(
        _LayoutScript.layer_shortkey_get, _LayoutScript.layer_shortkey_set
    )
    mapToLayer = property(
        _LayoutScript.layer_mapToLayer_get, _LayoutScript.layer_mapToLayer_set
    )
    mapToDatatype = property(
        _LayoutScript.layer_mapToDatatype_get, _LayoutScript.layer_mapToDatatype_set
    )

    def isEnabled(self):
        return _LayoutScript.layer_isEnabled(self)

    def isConductor(self):
        return _LayoutScript.layer_isConductor(self)

    def isVia(self):
        return _LayoutScript.layer_isVia(self)

    def isVisible(self, datatype):
        return _LayoutScript.layer_isVisible(self, datatype)

    def setDatatypesVisible(self, start, stop):
        return _LayoutScript.layer_setDatatypesVisible(self, start, stop)

    def setDatatypesVisibleAll(self):
        return _LayoutScript.layer_setDatatypesVisibleAll(self)

    def setDatatypesInvisible(self, start, stop):
        return _LayoutScript.layer_setDatatypesInvisible(self, start, stop)

    __swig_destroy__ = _LayoutScript.delete_layer


# Register layer in _LayoutScript:
_LayoutScript.layer_swigregister(layer)


class layers(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    @staticmethod
    def num(arg1):
        return _LayoutScript.layers_num(arg1)

    displayedLayers = property(
        _LayoutScript.layers_displayedLayers_get,
        _LayoutScript.layers_displayedLayers_set,
    )

    @staticmethod
    def number(at):
        return _LayoutScript.layers_number(at)

    @staticmethod
    def findLayer(layerName):
        return _LayoutScript.layers_findLayer(layerName)

    @staticmethod
    def showAllLayer():
        return _LayoutScript.layers_showAllLayer()

    @staticmethod
    def hideAllLayer():
        return _LayoutScript.layers_hideAllLayer()

    @staticmethod
    def enableAllLayer():
        return _LayoutScript.layers_enableAllLayer()

    @staticmethod
    def disableAllLayer():
        return _LayoutScript.layers_disableAllLayer()

    @staticmethod
    def reset3dView():
        return _LayoutScript.layers_reset3dView()

    @staticmethod
    def layerMax():
        return _LayoutScript.layers_layerMax()

    @staticmethod
    def disableUnusedLayers(d):
        return _LayoutScript.layers_disableUnusedLayers(d)

    @staticmethod
    def hideUnusedLayers(d):
        return _LayoutScript.layers_hideUnusedLayers(d)

    @staticmethod
    def hideCurrentUnusedLayers(d):
        return _LayoutScript.layers_hideCurrentUnusedLayers(d)

    @staticmethod
    def technologyLevelFrom3d():
        return _LayoutScript.layers_technologyLevelFrom3d()

    @staticmethod
    def technologyLayerRemoveAll():
        return _LayoutScript.layers_technologyLayerRemoveAll()

    @staticmethod
    def technologyLayerAdd(layer, type):
        return _LayoutScript.layers_technologyLayerAdd(layer, type)

    @staticmethod
    def technologyLayerSetParameter(layer, parnum, value):
        return _LayoutScript.layers_technologyLayerSetParameter(layer, parnum, value)

    @staticmethod
    def technologyLayerGetParameter(layer, parnum):
        return _LayoutScript.layers_technologyLayerGetParameter(layer, parnum)

    @staticmethod
    def technologyLayerGetType(layer):
        return _LayoutScript.layers_technologyLayerGetType(layer)

    @staticmethod
    def technologyLayerConductorSpaceing(layer):
        return _LayoutScript.layers_technologyLayerConductorSpaceing(layer)

    @staticmethod
    def technologyLayerConductorSize(layer):
        return _LayoutScript.layers_technologyLayerConductorSize(layer)

    @staticmethod
    def maxLevel():
        return _LayoutScript.layers_maxLevel()

    @staticmethod
    def findLevel(i):
        return _LayoutScript.layers_findLevel(i)

    @staticmethod
    def globalVia():
        return _LayoutScript.layers_globalVia()

    @staticmethod
    def importLayerSettings(filename):
        return _LayoutScript.layers_importLayerSettings(filename)

    def __init__(self):
        _LayoutScript.layers_swiginit(self, _LayoutScript.new_layers())

    __swig_destroy__ = _LayoutScript.delete_layers


# Register layers in _LayoutScript:
_LayoutScript.layers_swigregister(layers)


def layers_num(arg1):
    return _LayoutScript.layers_num(arg1)


cvar = _LayoutScript.cvar


def layers_number(at):
    return _LayoutScript.layers_number(at)


def layers_findLayer(layerName):
    return _LayoutScript.layers_findLayer(layerName)


def layers_showAllLayer():
    return _LayoutScript.layers_showAllLayer()


def layers_hideAllLayer():
    return _LayoutScript.layers_hideAllLayer()


def layers_enableAllLayer():
    return _LayoutScript.layers_enableAllLayer()


def layers_disableAllLayer():
    return _LayoutScript.layers_disableAllLayer()


def layers_reset3dView():
    return _LayoutScript.layers_reset3dView()


def layers_layerMax():
    return _LayoutScript.layers_layerMax()


def layers_disableUnusedLayers(d):
    return _LayoutScript.layers_disableUnusedLayers(d)


def layers_hideUnusedLayers(d):
    return _LayoutScript.layers_hideUnusedLayers(d)


def layers_hideCurrentUnusedLayers(d):
    return _LayoutScript.layers_hideCurrentUnusedLayers(d)


def layers_technologyLevelFrom3d():
    return _LayoutScript.layers_technologyLevelFrom3d()


def layers_technologyLayerRemoveAll():
    return _LayoutScript.layers_technologyLayerRemoveAll()


def layers_technologyLayerAdd(layer, type):
    return _LayoutScript.layers_technologyLayerAdd(layer, type)


def layers_technologyLayerSetParameter(layer, parnum, value):
    return _LayoutScript.layers_technologyLayerSetParameter(layer, parnum, value)


def layers_technologyLayerGetParameter(layer, parnum):
    return _LayoutScript.layers_technologyLayerGetParameter(layer, parnum)


def layers_technologyLayerGetType(layer):
    return _LayoutScript.layers_technologyLayerGetType(layer)


def layers_technologyLayerConductorSpaceing(layer):
    return _LayoutScript.layers_technologyLayerConductorSpaceing(layer)


def layers_technologyLayerConductorSize(layer):
    return _LayoutScript.layers_technologyLayerConductorSize(layer)


def layers_maxLevel():
    return _LayoutScript.layers_maxLevel()


def layers_findLevel(i):
    return _LayoutScript.layers_findLevel(i)


def layers_globalVia():
    return _LayoutScript.layers_globalVia()


def layers_importLayerSettings(filename):
    return _LayoutScript.layers_importLayerSettings(filename)


class layerTranslator(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def mapAll(self, to):
        return _LayoutScript.layerTranslator_mapAll(self, to)

    def map(self, _from):
        return _LayoutScript.layerTranslator_map(self, _from)

    def mapLayer(self, _from, to):
        return _LayoutScript.layerTranslator_mapLayer(self, _from, to)

    def invert(self):
        return _LayoutScript.layerTranslator_invert(self)

    def clear(self):
        return _LayoutScript.layerTranslator_clear(self)

    def __init__(self):
        _LayoutScript.layerTranslator_swiginit(
            self, _LayoutScript.new_layerTranslator()
        )

    __swig_destroy__ = _LayoutScript.delete_layerTranslator


# Register layerTranslator in _LayoutScript:
_LayoutScript.layerTranslator_swigregister(layerTranslator)


class layout(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr
    backgroundTool = property(
        _LayoutScript.layout_backgroundTool_get, _LayoutScript.layout_backgroundTool_set
    )
    barcodeTool = property(
        _LayoutScript.layout_barcodeTool_get, _LayoutScript.layout_barcodeTool_set
    )
    booleanTool = property(
        _LayoutScript.layout_booleanTool_get, _LayoutScript.layout_booleanTool_set
    )

    def closeDesign(self):
        return _LayoutScript.layout_closeDesign(self)

    def choose(self):
        return _LayoutScript.layout_choose(self)

    def chooseImport(self):
        return _LayoutScript.layout_chooseImport(self)

    debug = property(_LayoutScript.layout_debug_get, _LayoutScript.layout_debug_set)
    drawing = property(
        _LayoutScript.layout_drawing_get, _LayoutScript.layout_drawing_set
    )
    drcTool = property(
        _LayoutScript.layout_drcTool_get, _LayoutScript.layout_drcTool_set
    )

    def executeMacro(self, *args):
        return _LayoutScript.layout_executeMacro(self, *args)

    extractionTool = property(
        _LayoutScript.layout_extractionTool_get, _LayoutScript.layout_extractionTool_set
    )
    filename = property(
        _LayoutScript.layout_filename_get, _LayoutScript.layout_filename_set
    )

    def getBool(self, caption, label):
        return _LayoutScript.layout_getBool(self, caption, label)

    def getText(self, *args):
        return _LayoutScript.layout_getText(self, *args)

    def getItem(self, caption, lable, values):
        return _LayoutScript.layout_getItem(self, caption, lable, values)

    def getInteger(self, caption, lable, value=0):
        return _LayoutScript.layout_getInteger(self, caption, lable, value)

    def getSize(self, caption, lable, value=1):
        return _LayoutScript.layout_getSize(self, caption, lable, value)

    def getLayer(self, lable, value=0):
        return _LayoutScript.layout_getLayer(self, lable, value)

    def getDouble(self, caption, lable, value=0, digits=1):
        return _LayoutScript.layout_getDouble(self, caption, lable, value, digits)

    def getOpenFilename(self, *args):
        return _LayoutScript.layout_getOpenFilename(self, *args)

    def getSaveFilename(self, *args):
        return _LayoutScript.layout_getSaveFilename(self, *args)

    def getDirectory(self, *args):
        return _LayoutScript.layout_getDirectory(self, *args)

    def getStatistic(self):
        return _LayoutScript.layout_getStatistic(self)

    def getToolbarState(self):
        return _LayoutScript.layout_getToolbarState(self)

    def getVersion(self):
        return _LayoutScript.layout_getVersion(self)

    def hideToolBar(self, name):
        return _LayoutScript.layout_hideToolBar(self, name)

    def menuAdd(self, name, entries):
        return _LayoutScript.layout_menuAdd(self, name, entries)

    netlistTool = property(
        _LayoutScript.layout_netlistTool_get, _LayoutScript.layout_netlistTool_set
    )

    def open(self, fileName: str):
        return _LayoutScript.layout_open(self, fileName)

    def _print(self):
        return _LayoutScript.layout__print(self)

    def resetShortcut(self, function):
        return _LayoutScript.layout_resetShortcut(self, function)

    def save(self):
        return _LayoutScript.layout_save(self)

    def saveAs(self):
        return _LayoutScript.layout_saveAs(self)

    def screenshot(self):
        return _LayoutScript.layout_screenshot(self)

    def setCell(self):
        return _LayoutScript.layout_setCell(self)

    def setCellname(self):
        return _LayoutScript.layout_setCellname(self)

    def setMenuEnabled(self, name, b):
        return _LayoutScript.layout_setMenuEnabled(self, name, b)

    def setToolbarEnabled(self, name, b):
        return _LayoutScript.layout_setToolbarEnabled(self, name, b)

    def setSnapToGrid(self, b):
        return _LayoutScript.layout_setSnapToGrid(self, b)

    def setSnapToPoint(self, b):
        return _LayoutScript.layout_setSnapToPoint(self, b)

    def setSnapToMiddle(self, b):
        return _LayoutScript.layout_setSnapToMiddle(self, b)

    def setSnapToLine(self, b):
        return _LayoutScript.layout_setSnapToLine(self, b)

    def setSnapToCenter(self, b):
        return _LayoutScript.layout_setSnapToCenter(self, b)

    def setSnapToIntersection(self, b):
        return _LayoutScript.layout_setSnapToIntersection(self, b)

    def setToolbarState(self, arg2):
        return _LayoutScript.layout_setToolbarState(self, arg2)

    def setShortcut(self, *args):
        return _LayoutScript.layout_setShortcut(self, *args)

    def showMessage(self, caption, label):
        return _LayoutScript.layout_showMessage(self, caption, label)

    def showStatus(self, lable):
        return _LayoutScript.layout_showStatus(self, lable)

    def showToolBar(self, name):
        return _LayoutScript.layout_showToolBar(self, name)

    def showTextEditor(self):
        return _LayoutScript.layout_showTextEditor(self)

    def toolBarAdd(self, name, buttons):
        return _LayoutScript.layout_toolBarAdd(self, name, buttons)

    view3dTool = property(
        _LayoutScript.layout_view3dTool_get, _LayoutScript.layout_view3dTool_set
    )

    def setLayerSorting(self, arg2):
        return _LayoutScript.layout_setLayerSorting(self, arg2)

    def getView(self):
        return _LayoutScript.layout_getView(self)

    def saveScreenshot(self, filename):
        return _LayoutScript.layout_saveScreenshot(self, filename)

    def group(self):
        return _LayoutScript.layout_group(self)

    def deleteActuellCell(self):
        return _LayoutScript.layout_deleteActuellCell(self)

    def newCell(self):
        return _LayoutScript.layout_newCell(self)

    def __init__(self):
        _LayoutScript.layout_swiginit(self, _LayoutScript.new_layout())

    __swig_destroy__ = _LayoutScript.delete_layout


# Register layout in _LayoutScript:
_LayoutScript.layout_swigregister(layout)


class layout3d(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    filename = property(
        _LayoutScript.layout3d_filename_get, _LayoutScript.layout3d_filename_set
    )
    drawing = property(
        _LayoutScript.layout3d_drawing_get, _LayoutScript.layout3d_drawing_set
    )

    def closeDesign(self):
        return _LayoutScript.layout3d_closeDesign(self)

    __swig_destroy__ = _LayoutScript.delete_layout3d


# Register layout3d in _LayoutScript:
_LayoutScript.layout3d_swigregister(layout3d)


class netList(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    cellname = property(
        _LayoutScript.netList_cellname_get, _LayoutScript.netList_cellname_set
    )

    def getExternalNodes(self):
        return _LayoutScript.netList_getExternalNodes(self)

    def getNodes(self):
        return _LayoutScript.netList_getNodes(self)

    def getNode(self, node):
        return _LayoutScript.netList_getNode(self, node)

    def devicesCount(self):
        return _LayoutScript.netList_devicesCount(self)

    def getDevice(self, num):
        return _LayoutScript.netList_getDevice(self, num)

    __swig_destroy__ = _LayoutScript.delete_netList


# Register netList in _LayoutScript:
_LayoutScript.netList_swigregister(netList)


class netListDevice(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    devicename = property(
        _LayoutScript.netListDevice_devicename_get,
        _LayoutScript.netListDevice_devicename_set,
    )
    cellname = property(
        _LayoutScript.netListDevice_cellname_get,
        _LayoutScript.netListDevice_cellname_set,
    )

    def connectionsCount(self):
        return _LayoutScript.netListDevice_connectionsCount(self)

    def getConnectionNames(self):
        return _LayoutScript.netListDevice_getConnectionNames(self)

    def getNode(self, pin):
        return _LayoutScript.netListDevice_getNode(self, pin)

    __swig_destroy__ = _LayoutScript.delete_netListDevice


# Register netListDevice in _LayoutScript:
_LayoutScript.netListDevice_swigregister(netListDevice)


class netListModule(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def libraryAdd(self, fileName):
        return _LayoutScript.netListModule_libraryAdd(self, fileName)

    def getLibrary(self):
        return _LayoutScript.netListModule_getLibrary(self)

    def libraryRemoveAll(self):
        return _LayoutScript.netListModule_libraryRemoveAll(self)

    def technologyLayerRemoveAll(self):
        return _LayoutScript.netListModule_technologyLayerRemoveAll(self)

    def technologyLayerAdd(self, layer, type):
        return _LayoutScript.netListModule_technologyLayerAdd(self, layer, type)

    def technologyLayerSetParameter(self, layer, parnum, value):
        return _LayoutScript.netListModule_technologyLayerSetParameter(
            self, layer, parnum, value
        )

    def technologyLayerConductorSpaceing(self, layer):
        return _LayoutScript.netListModule_technologyLayerConductorSpaceing(self, layer)

    def technologyLayerConductorSize(self, layer):
        return _LayoutScript.netListModule_technologyLayerConductorSize(self, layer)

    def netlistLoad(self, filename):
        return _LayoutScript.netListModule_netlistLoad(self, filename)

    def netlistSave(self, filename, type):
        return _LayoutScript.netListModule_netlistSave(self, filename, type)

    def saveNetlist(self, netl, filename, type):
        return _LayoutScript.netListModule_saveNetlist(self, netl, filename, type)

    def addLVSList(self, text, job):
        return _LayoutScript.netListModule_addLVSList(self, text, job)

    def clearLVSList(self):
        return _LayoutScript.netListModule_clearLVSList(self)

    def lvs(self):
        return _LayoutScript.netListModule_lvs(self)

    def layoutVersusSchematic(self):
        return _LayoutScript.netListModule_layoutVersusSchematic(self)

    def layoutVersusNetlist(self):
        return _LayoutScript.netListModule_layoutVersusNetlist(self)

    def getLVSResults(self):
        return _LayoutScript.netListModule_getLVSResults(self)

    def extractedNetlistSave(self, filename, type):
        return _LayoutScript.netListModule_extractedNetlistSave(self, filename, type)

    def buildConnect(self):
        return _LayoutScript.netListModule_buildConnect(self)

    def editExtractedNetList(self):
        return _LayoutScript.netListModule_editExtractedNetList(self)

    def getLoadedNetList(self, cellname):
        return _LayoutScript.netListModule_getLoadedNetList(self, cellname)

    def getSchematicNetList(self, cellname):
        return _LayoutScript.netListModule_getSchematicNetList(self, cellname)

    def getExtracatedNetList(self, cellname):
        return _LayoutScript.netListModule_getExtracatedNetList(self, cellname)

    def getExtractedNetList(self, cellname):
        return _LayoutScript.netListModule_getExtractedNetList(self, cellname)

    def extractNetList(self):
        return _LayoutScript.netListModule_extractNetList(self)

    def autoPlace(self, placeDigital, placeAnalog, srLayer, analogDistance):
        return _LayoutScript.netListModule_autoPlace(
            self, placeDigital, placeAnalog, srLayer, analogDistance
        )

    def autoRoute(self):
        return _LayoutScript.netListModule_autoRoute(self)

    def placeDevice(self, *args):
        return _LayoutScript.netListModule_placeDevice(self, *args)

    __swig_destroy__ = _LayoutScript.delete_netListModule


# Register netListModule in _LayoutScript:
_LayoutScript.netListModule_swigregister(netListModule)


class plotData(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    __swig_destroy__ = _LayoutScript.delete_plotData


# Register plotData in _LayoutScript:
_LayoutScript.plotData_swigregister(plotData)


class point(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr
    __swig_destroy__ = _LayoutScript.delete_point

    def x(self):
        return _LayoutScript.point_x(self)

    def y(self):
        return _LayoutScript.point_y(self)

    def length(self):
        return _LayoutScript.point_length(self)

    def distanceTo(self, p2):
        return _LayoutScript.point_distanceTo(self, p2)

    def distanceToLine(self, p1, p2):
        return _LayoutScript.point_distanceToLine(self, p1, p2)

    def distanceToLineAbs(self, p1, p2):
        return _LayoutScript.point_distanceToLineAbs(self, p1, p2)

    def __init__(self, *args):
        _LayoutScript.point_swiginit(self, _LayoutScript.new_point(*args))

    def set(self, *args):
        return _LayoutScript.point_set(self, *args)

    def setX(self, *args):
        return _LayoutScript.point_setX(self, *args)

    def setY(self, *args):
        return _LayoutScript.point_setY(self, *args)

    def __str__(self):
        return _LayoutScript.point___str__(self)

    def __eq__(self, p2):
        return _LayoutScript.point___eq__(self, p2)

    def __ne__(self, p2):
        return _LayoutScript.point___ne__(self, p2)

    def __add__(self, p2):
        return _LayoutScript.point___add__(self, p2)

    def __sub__(self, p2):
        return _LayoutScript.point___sub__(self, p2)


# Register point in _LayoutScript:
_LayoutScript.point_swigregister(point)


class pointArray(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LayoutScript.pointArray_swiginit(self, _LayoutScript.new_pointArray(*args))

    __swig_destroy__ = _LayoutScript.delete_pointArray

    def addCornerArea(self, value1, value2, angleInt=0):
        return _LayoutScript.pointArray_addCornerArea(self, value1, value2, angleInt)

    def attachPoint(self, p):
        return _LayoutScript.pointArray_attachPoint(self, p)

    def append(self, p):
        return _LayoutScript.pointArray_append(self, p)

    def centerOfGavity(self):
        return _LayoutScript.pointArray_centerOfGavity(self)

    def centerOfGravity(self):
        return _LayoutScript.pointArray_centerOfGravity(self)

    def clear(self):
        return _LayoutScript.pointArray_clear(self)

    def chamfer(self, value, type, angleInt=0):
        return _LayoutScript.pointArray_chamfer(self, value, type, angleInt)

    def filletRound(self, value, type, angleInt=0):
        return _LayoutScript.pointArray_filletRound(self, value, type, angleInt)

    def filletBezier(self, value, type, angleInt=0):
        return _LayoutScript.pointArray_filletBezier(self, value, type, angleInt)

    def flip(self):
        return _LayoutScript.pointArray_flip(self)

    def insert(self, i, p):
        return _LayoutScript.pointArray_insert(self, i, p)

    def length(self):
        return _LayoutScript.pointArray_length(self)

    def point(self, i):
        return _LayoutScript.pointArray_point(self, i)

    def resize(self, size):
        return _LayoutScript.pointArray_resize(self, size)

    def setPoint(self, i, p):
        return _LayoutScript.pointArray_setPoint(self, i, p)

    def size(self):
        return _LayoutScript.pointArray_size(self)

    def center(self):
        return _LayoutScript.pointArray_center(self)

    def minimum(self):
        return _LayoutScript.pointArray_minimum(self)

    def maximum(self):
        return _LayoutScript.pointArray_maximum(self)

    def BSpline(self):
        return _LayoutScript.pointArray_BSpline(self)

    @staticmethod
    def spirale(center, p1, p2, angelstep):
        return _LayoutScript.pointArray_spirale(center, p1, p2, angelstep)

    @staticmethod
    def coil(center, p1, p2, turns, angelstep):
        return _LayoutScript.pointArray_coil(center, p1, p2, turns, angelstep)

    @staticmethod
    def circle(center, radius, angelstep):
        return _LayoutScript.pointArray_circle(center, radius, angelstep)

    @staticmethod
    def ellipse(center, rx, ry, angelstep):
        return _LayoutScript.pointArray_ellipse(center, rx, ry, angelstep)

    @staticmethod
    def bezier2(pstart, pend, pbezier, maxDepth=-2):
        return _LayoutScript.pointArray_bezier2(pstart, pend, pbezier, maxDepth)

    @staticmethod
    def bezier3(pstart, pend, pbezierstart, pbezierend, maxDepth=-2):
        return _LayoutScript.pointArray_bezier3(
            pstart, pend, pbezierstart, pbezierend, maxDepth
        )

    def set(self, *args):
        return _LayoutScript.pointArray_set(self, *args)

    def attach(self, *args):
        return _LayoutScript.pointArray_attach(self, *args)

    def __eq__(self, p2):
        return _LayoutScript.pointArray___eq__(self, p2)

    def __ne__(self, p2):
        return _LayoutScript.pointArray___ne__(self, p2)


# Register pointArray in _LayoutScript:
_LayoutScript.pointArray_swigregister(pointArray)


def pointArray_spirale(center, p1, p2, angelstep):
    return _LayoutScript.pointArray_spirale(center, p1, p2, angelstep)


def pointArray_coil(center, p1, p2, turns, angelstep):
    return _LayoutScript.pointArray_coil(center, p1, p2, turns, angelstep)


def pointArray_circle(center, radius, angelstep):
    return _LayoutScript.pointArray_circle(center, radius, angelstep)


def pointArray_ellipse(center, rx, ry, angelstep):
    return _LayoutScript.pointArray_ellipse(center, rx, ry, angelstep)


def pointArray_bezier2(pstart, pend, pbezier, maxDepth=-2):
    return _LayoutScript.pointArray_bezier2(pstart, pend, pbezier, maxDepth)


def pointArray_bezier3(pstart, pend, pbezierstart, pbezierend, maxDepth=-2):
    return _LayoutScript.pointArray_bezier3(
        pstart, pend, pbezierstart, pbezierend, maxDepth
    )


class project(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    @staticmethod
    def closeLayout(l):
        return _LayoutScript.project_closeLayout(l)

    @staticmethod
    def closeLayout3d(l):
        return _LayoutScript.project_closeLayout3d(l)

    @staticmethod
    def closeSchematic(s):
        return _LayoutScript.project_closeSchematic(s)

    defaultGui = property(
        _LayoutScript.project_defaultGui_get, _LayoutScript.project_defaultGui_set
    )

    @staticmethod
    def getCentralTextEditor():
        return _LayoutScript.project_getCentralTextEditor()

    @staticmethod
    def getLayout(s):
        return _LayoutScript.project_getLayout(s)

    @staticmethod
    def getLayout3d(l):
        return _LayoutScript.project_getLayout3d(l)

    @staticmethod
    def getOpenTextEditor():
        return _LayoutScript.project_getOpenTextEditor()

    @staticmethod
    def getSchematic(lay):
        return _LayoutScript.project_getSchematic(lay)

    @staticmethod
    def hasSchematic(lay):
        return _LayoutScript.project_hasSchematic(lay)

    @staticmethod
    def newLayout() -> layout:
        return _LayoutScript.project_newLayout()

    @staticmethod
    def newSchematic():
        return _LayoutScript.project_newSchematic()

    __swig_destroy__ = _LayoutScript.delete_project


# Register project in _LayoutScript:
_LayoutScript.project_swigregister(project)


def project_closeLayout(l):
    return _LayoutScript.project_closeLayout(l)


def project_closeLayout3d(l):
    return _LayoutScript.project_closeLayout3d(l)


def project_closeSchematic(s):
    return _LayoutScript.project_closeSchematic(s)


def project_getCentralTextEditor():
    return _LayoutScript.project_getCentralTextEditor()


def project_getLayout(s):
    return _LayoutScript.project_getLayout(s)


def project_getLayout3d(l):
    return _LayoutScript.project_getLayout3d(l)


def project_getOpenTextEditor():
    return _LayoutScript.project_getOpenTextEditor()


def project_getSchematic(lay):
    return _LayoutScript.project_getSchematic(lay)


def project_hasSchematic(lay):
    return _LayoutScript.project_hasSchematic(lay)


def project_newLayout():
    return _LayoutScript.project_newLayout()


def project_newSchematic():
    return _LayoutScript.project_newSchematic()


class rect(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LayoutScript.rect_swiginit(self, _LayoutScript.new_rect(*args))

    def width(self):
        return _LayoutScript.rect_width(self)

    def height(self):
        return _LayoutScript.rect_height(self)

    def left(self):
        return _LayoutScript.rect_left(self)

    def right(self):
        return _LayoutScript.rect_right(self)

    def top(self):
        return _LayoutScript.rect_top(self)

    def bottom(self):
        return _LayoutScript.rect_bottom(self)

    def set(self, *args):
        return _LayoutScript.rect_set(self, *args)

    def setLeft(self, *args):
        return _LayoutScript.rect_setLeft(self, *args)

    def setRight(self, *args):
        return _LayoutScript.rect_setRight(self, *args)

    def setTop(self, *args):
        return _LayoutScript.rect_setTop(self, *args)

    def setBottom(self, *args):
        return _LayoutScript.rect_setBottom(self, *args)

    def __eq__(self, p2):
        return _LayoutScript.rect___eq__(self, p2)

    def __ne__(self, p2):
        return _LayoutScript.rect___ne__(self, p2)

    __swig_destroy__ = _LayoutScript.delete_rect


# Register rect in _LayoutScript:
_LayoutScript.rect_swigregister(rect)


class process(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    @staticmethod
    def execute(command, arguments):
        return _LayoutScript.process_execute(command, arguments)

    @staticmethod
    def executeTcl(command):
        return _LayoutScript.process_executeTcl(command)

    @staticmethod
    def startDetached(command, arguments):
        return _LayoutScript.process_startDetached(command, arguments)

    @staticmethod
    def getEnv(parameter):
        return _LayoutScript.process_getEnv(parameter)

    @staticmethod
    def setEnv(parameter, value):
        return _LayoutScript.process_setEnv(parameter, value)

    @staticmethod
    def externalTool(path, name, parameter, callback):
        return _LayoutScript.process_externalTool(path, name, parameter, callback)

    @staticmethod
    def toolResult():
        return _LayoutScript.process_toolResult()

    @staticmethod
    def isMac():
        return _LayoutScript.process_isMac()

    @staticmethod
    def isWindows():
        return _LayoutScript.process_isWindows()

    @staticmethod
    def isLinux():
        return _LayoutScript.process_isLinux()

    @staticmethod
    def openBrowser(url):
        return _LayoutScript.process_openBrowser(url)

    __swig_destroy__ = _LayoutScript.delete_process


# Register process in _LayoutScript:
_LayoutScript.process_swigregister(process)


def process_execute(command, arguments):
    return _LayoutScript.process_execute(command, arguments)


def process_executeTcl(command):
    return _LayoutScript.process_executeTcl(command)


def process_startDetached(command, arguments):
    return _LayoutScript.process_startDetached(command, arguments)


def process_getEnv(parameter):
    return _LayoutScript.process_getEnv(parameter)


def process_setEnv(parameter, value):
    return _LayoutScript.process_setEnv(parameter, value)


def process_externalTool(path, name, parameter, callback):
    return _LayoutScript.process_externalTool(path, name, parameter, callback)


def process_toolResult():
    return _LayoutScript.process_toolResult()


def process_isMac():
    return _LayoutScript.process_isMac()


def process_isWindows():
    return _LayoutScript.process_isWindows()


def process_isLinux():
    return _LayoutScript.process_isLinux()


def process_openBrowser(url):
    return _LayoutScript.process_openBrowser(url)


class setup(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr
    mouseView = property(
        _LayoutScript.setup_mouseView_get, _LayoutScript.setup_mouseView_set
    )
    showReport = property(
        _LayoutScript.setup_showReport_get, _LayoutScript.setup_showReport_set
    )
    autosaveTime = property(
        _LayoutScript.setup_autosaveTime_get, _LayoutScript.setup_autosaveTime_set
    )
    showSnap = property(
        _LayoutScript.setup_showSnap_get, _LayoutScript.setup_showSnap_set
    )
    showGrid = property(
        _LayoutScript.setup_showGrid_get, _LayoutScript.setup_showGrid_set
    )
    showScale = property(
        _LayoutScript.setup_showScale_get, _LayoutScript.setup_showScale_set
    )
    font = property(_LayoutScript.setup_font_get, _LayoutScript.setup_font_set)
    fontIteration = property(
        _LayoutScript.setup_fontIteration_get, _LayoutScript.setup_fontIteration_set
    )
    fontSize = property(
        _LayoutScript.setup_fontSize_get, _LayoutScript.setup_fontSize_set
    )
    displayCellName = property(
        _LayoutScript.setup_displayCellName_get, _LayoutScript.setup_displayCellName_set
    )
    displayCells = property(
        _LayoutScript.setup_displayCells_get, _LayoutScript.setup_displayCells_set
    )
    displayCellOrigin = property(
        _LayoutScript.setup_displayCellOrigin_get,
        _LayoutScript.setup_displayCellOrigin_set,
    )
    ignoreTextTrans = property(
        _LayoutScript.setup_ignoreTextTrans_get, _LayoutScript.setup_ignoreTextTrans_set
    )
    displayText = property(
        _LayoutScript.setup_displayText_get, _LayoutScript.setup_displayText_set
    )
    displayCellSingleLayer = property(
        _LayoutScript.setup_displayCellSingleLayer_get,
        _LayoutScript.setup_displayCellSingleLayer_set,
    )
    layerDockStyle = property(
        _LayoutScript.setup_layerDockStyle_get, _LayoutScript.setup_layerDockStyle_set
    )
    depthOfCellrefs = property(
        _LayoutScript.setup_depthOfCellrefs_get, _LayoutScript.setup_depthOfCellrefs_set
    )
    showMenuIcons = property(
        _LayoutScript.setup_showMenuIcons_get, _LayoutScript.setup_showMenuIcons_set
    )

    @staticmethod
    def setBackgroundColor(red, green, blue):
        return _LayoutScript.setup_setBackgroundColor(red, green, blue)

    @staticmethod
    def setMouseColor(red, green, blue):
        return _LayoutScript.setup_setMouseColor(red, green, blue)

    @staticmethod
    def setGridColor(red, green, blue):
        return _LayoutScript.setup_setGridColor(red, green, blue)

    @staticmethod
    def setZeroColor(red, green, blue):
        return _LayoutScript.setup_setZeroColor(red, green, blue)

    @staticmethod
    def setSelectColor(red, green, blue):
        return _LayoutScript.setup_setSelectColor(red, green, blue)

    @staticmethod
    def setHighlightColor(red, green, blue):
        return _LayoutScript.setup_setHighlightColor(red, green, blue)

    @staticmethod
    def setHighlightBrush(brush):
        return _LayoutScript.setup_setHighlightBrush(brush)

    @staticmethod
    def setStrongHighlightColor(red, green, blue):
        return _LayoutScript.setup_setStrongHighlightColor(red, green, blue)

    @staticmethod
    def setStrongHighlightBrush(brush):
        return _LayoutScript.setup_setStrongHighlightBrush(brush)

    circularDefault = property(
        _LayoutScript.setup_circularDefault_get, _LayoutScript.setup_circularDefault_set
    )
    defaultPathWidth = property(
        _LayoutScript.setup_defaultPathWidth_get,
        _LayoutScript.setup_defaultPathWidth_set,
    )
    defaultPathCap = property(
        _LayoutScript.setup_defaultPathCap_get, _LayoutScript.setup_defaultPathCap_set
    )
    defaultTextPresentation = property(
        _LayoutScript.setup_defaultTextPresentation_get,
        _LayoutScript.setup_defaultTextPresentation_set,
    )
    defaultTextWidth = property(
        _LayoutScript.setup_defaultTextWidth_get,
        _LayoutScript.setup_defaultTextWidth_set,
    )
    defaultBezierIteration = property(
        _LayoutScript.setup_defaultBezierIteration_get,
        _LayoutScript.setup_defaultBezierIteration_set,
    )
    defaultShapeConstraint = property(
        _LayoutScript.setup_defaultShapeConstraint_get,
        _LayoutScript.setup_defaultShapeConstraint_set,
    )
    cifSaveCircle = property(
        _LayoutScript.setup_cifSaveCircle_get, _LayoutScript.setup_cifSaveCircle_set
    )
    cifTopCell = property(
        _LayoutScript.setup_cifTopCell_get, _LayoutScript.setup_cifTopCell_set
    )
    dxfSaveLayerNumber = property(
        _LayoutScript.setup_dxfSaveLayerNumber_get,
        _LayoutScript.setup_dxfSaveLayerNumber_set,
    )
    dxfSaveCircle = property(
        _LayoutScript.setup_dxfSaveCircle_get, _LayoutScript.setup_dxfSaveCircle_set
    )
    dxfSaveArc = property(
        _LayoutScript.setup_dxfSaveArc_get, _LayoutScript.setup_dxfSaveArc_set
    )
    dxfUnits = property(
        _LayoutScript.setup_dxfUnits_get, _LayoutScript.setup_dxfUnits_set
    )
    stlUnits = property(
        _LayoutScript.setup_stlUnits_get, _LayoutScript.setup_stlUnits_set
    )
    povUnits = property(
        _LayoutScript.setup_povUnits_get, _LayoutScript.setup_povUnits_set
    )
    offUnits = property(
        _LayoutScript.setup_offUnits_get, _LayoutScript.setup_offUnits_set
    )
    oasisSaveCircle = property(
        _LayoutScript.setup_oasisSaveCircle_get, _LayoutScript.setup_oasisSaveCircle_set
    )
    oasisSaveCtrapezoid = property(
        _LayoutScript.setup_oasisSaveCtrapezoid_get,
        _LayoutScript.setup_oasisSaveCtrapezoid_set,
    )
    oasisSaveTrapezoid = property(
        _LayoutScript.setup_oasisSaveTrapezoid_get,
        _LayoutScript.setup_oasisSaveTrapezoid_set,
    )
    oasisMapLayer = property(
        _LayoutScript.setup_oasisMapLayer_get, _LayoutScript.setup_oasisMapLayer_set
    )
    oasisSaveCBlock = property(
        _LayoutScript.setup_oasisSaveCBlock_get, _LayoutScript.setup_oasisSaveCBlock_set
    )
    oasisLoadLayerNames = property(
        _LayoutScript.setup_oasisLoadLayerNames_get,
        _LayoutScript.setup_oasisLoadLayerNames_set,
    )
    openAccessCallbackPath = property(
        _LayoutScript.setup_openAccessCallbackPath_get,
        _LayoutScript.setup_openAccessCallbackPath_set,
    )
    openAccessPyCell = property(
        _LayoutScript.setup_openAccessPyCell_get,
        _LayoutScript.setup_openAccessPyCell_set,
    )
    openAccessPyCellPython = property(
        _LayoutScript.setup_openAccessPyCellPython_get,
        _LayoutScript.setup_openAccessPyCellPython_set,
    )
    openAccessMapLayerNames = property(
        _LayoutScript.setup_openAccessMapLayerNames_get,
        _LayoutScript.setup_openAccessMapLayerNames_set,
    )
    openAccessSchematicStyle = property(
        _LayoutScript.setup_openAccessSchematicStyle_get,
        _LayoutScript.setup_openAccessSchematicStyle_set,
    )
    openAccessBoundary = property(
        _LayoutScript.setup_openAccessBoundary_get,
        _LayoutScript.setup_openAccessBoundary_set,
    )
    callbackPath = property(
        _LayoutScript.setup_callbackPath_get, _LayoutScript.setup_callbackPath_set
    )
    model3dPath = property(
        _LayoutScript.setup_model3dPath_get, _LayoutScript.setup_model3dPath_set
    )
    gdsOnlyStoreEnabledLayer = property(
        _LayoutScript.setup_gdsOnlyStoreEnabledLayer_get,
        _LayoutScript.setup_gdsOnlyStoreEnabledLayer_set,
    )
    gdsPathToPolygon = property(
        _LayoutScript.setup_gdsPathToPolygon_get,
        _LayoutScript.setup_gdsPathToPolygon_set,
    )
    oasisOnlyStoreEnabledLayer = property(
        _LayoutScript.setup_oasisOnlyStoreEnabledLayer_get,
        _LayoutScript.setup_oasisOnlyStoreEnabledLayer_set,
    )
    autoDisableUnusedLayers = property(
        _LayoutScript.setup_autoDisableUnusedLayers_get,
        _LayoutScript.setup_autoDisableUnusedLayers_set,
    )
    autoStoreLayerSetup = property(
        _LayoutScript.setup_autoStoreLayerSetup_get,
        _LayoutScript.setup_autoStoreLayerSetup_set,
    )
    autoLoadLayerFiles = property(
        _LayoutScript.setup_autoLoadLayerFiles_get,
        _LayoutScript.setup_autoLoadLayerFiles_set,
    )
    gdsAutoMapDatatypes = property(
        _LayoutScript.setup_gdsAutoMapDatatypes_get,
        _LayoutScript.setup_gdsAutoMapDatatypes_set,
    )
    gdsStoreLayerNames = property(
        _LayoutScript.setup_gdsStoreLayerNames_get,
        _LayoutScript.setup_gdsStoreLayerNames_set,
    )
    gdsStoreRaithExtensions = property(
        _LayoutScript.setup_gdsStoreRaithExtensions_get,
        _LayoutScript.setup_gdsStoreRaithExtensions_set,
    )
    gdsStoreTextHeightAsMagnification = property(
        _LayoutScript.setup_gdsStoreTextHeightAsMagnification_get,
        _LayoutScript.setup_gdsStoreTextHeightAsMagnification_set,
    )
    oasisAutoMapDatatypes = property(
        _LayoutScript.setup_oasisAutoMapDatatypes_get,
        _LayoutScript.setup_oasisAutoMapDatatypes_set,
    )
    gdsMaxPoints = property(
        _LayoutScript.setup_gdsMaxPoints_get, _LayoutScript.setup_gdsMaxPoints_set
    )
    gdsMultiXYRecord = property(
        _LayoutScript.setup_gdsMultiXYRecord_get,
        _LayoutScript.setup_gdsMultiXYRecord_set,
    )
    gdsPad2048 = property(
        _LayoutScript.setup_gdsPad2048_get, _LayoutScript.setup_gdsPad2048_set
    )
    gdsMapLayer = property(
        _LayoutScript.setup_gdsMapLayer_get, _LayoutScript.setup_gdsMapLayer_set
    )
    gdsBoxToPolygon = property(
        _LayoutScript.setup_gdsBoxToPolygon_get, _LayoutScript.setup_gdsBoxToPolygon_set
    )
    gdsTextToPolygon = property(
        _LayoutScript.setup_gdsTextToPolygon_get,
        _LayoutScript.setup_gdsTextToPolygon_set,
    )
    gdsTextToPolygonDefaultWidth = property(
        _LayoutScript.setup_gdsTextToPolygonDefaultWidth_get,
        _LayoutScript.setup_gdsTextToPolygonDefaultWidth_set,
    )
    gdsValidate = property(
        _LayoutScript.setup_gdsValidate_get, _LayoutScript.setup_gdsValidate_set
    )
    gdsSortElements = property(
        _LayoutScript.setup_gdsSortElements_get, _LayoutScript.setup_gdsSortElements_set
    )
    gerberSaveArc = property(
        _LayoutScript.setup_gerberSaveArc_get, _LayoutScript.setup_gerberSaveArc_set
    )
    gerberSaveOptimize = property(
        _LayoutScript.setup_gerberSaveOptimize_get,
        _LayoutScript.setup_gerberSaveOptimize_set,
    )
    gerberInverseShapesOnOtherLayer = property(
        _LayoutScript.setup_gerberInverseShapesOnOtherLayer_get,
        _LayoutScript.setup_gerberInverseShapesOnOtherLayer_set,
    )
    gerberSaveCircle = property(
        _LayoutScript.setup_gerberSaveCircle_get,
        _LayoutScript.setup_gerberSaveCircle_set,
    )
    lefCellBoundaryLayer = property(
        _LayoutScript.setup_lefCellBoundaryLayer_get,
        _LayoutScript.setup_lefCellBoundaryLayer_set,
    )
    lefStoreLayerInfos = property(
        _LayoutScript.setup_lefStoreLayerInfos_get,
        _LayoutScript.setup_lefStoreLayerInfos_set,
    )
    apLamda = property(_LayoutScript.setup_apLamda_get, _LayoutScript.setup_apLamda_set)
    sourceDatabase = property(
        _LayoutScript.setup_sourceDatabase_get, _LayoutScript.setup_sourceDatabase_set
    )
    pixelResolution = property(
        _LayoutScript.setup_pixelResolution_get, _LayoutScript.setup_pixelResolution_set
    )
    pixelLayerMap = property(
        _LayoutScript.setup_pixelLayerMap_get, _LayoutScript.setup_pixelLayerMap_set
    )
    pixelColorBits = property(
        _LayoutScript.setup_pixelColorBits_get, _LayoutScript.setup_pixelColorBits_set
    )
    pixelMethod = property(
        _LayoutScript.setup_pixelMethod_get, _LayoutScript.setup_pixelMethod_set
    )
    pixelDither = property(
        _LayoutScript.setup_pixelDither_get, _LayoutScript.setup_pixelDither_set
    )
    pixelBorder = property(
        _LayoutScript.setup_pixelBorder_get, _LayoutScript.setup_pixelBorder_set
    )
    pixelMinSize = property(
        _LayoutScript.setup_pixelMinSize_get, _LayoutScript.setup_pixelMinSize_set
    )
    pixelSteps = property(
        _LayoutScript.setup_pixelSteps_get, _LayoutScript.setup_pixelSteps_set
    )
    pixelInvert = property(
        _LayoutScript.setup_pixelInvert_get, _LayoutScript.setup_pixelInvert_set
    )
    tldLamda = property(
        _LayoutScript.setup_tldLamda_get, _LayoutScript.setup_tldLamda_set
    )
    csvFieldDelimiter = property(
        _LayoutScript.setup_csvFieldDelimiter_get,
        _LayoutScript.setup_csvFieldDelimiter_set,
    )
    epsEndOfLine = property(
        _LayoutScript.setup_epsEndOfLine_get, _LayoutScript.setup_epsEndOfLine_set
    )
    epsScale = property(
        _LayoutScript.setup_epsScale_get, _LayoutScript.setup_epsScale_set
    )
    svgEndOfLine = property(
        _LayoutScript.setup_svgEndOfLine_get, _LayoutScript.setup_svgEndOfLine_set
    )
    dsnBoundaryLayer = property(
        _LayoutScript.setup_dsnBoundaryLayer_get,
        _LayoutScript.setup_dsnBoundaryLayer_set,
    )
    dsnKeepoutLayer = property(
        _LayoutScript.setup_dsnKeepoutLayer_get, _LayoutScript.setup_dsnKeepoutLayer_set
    )
    scrollDirection = property(
        _LayoutScript.setup_scrollDirection_get, _LayoutScript.setup_scrollDirection_set
    )
    updateCheck = property(
        _LayoutScript.setup_updateCheck_get, _LayoutScript.setup_updateCheck_set
    )
    defaultPolygonRemoveNotNeededPoints = property(
        _LayoutScript.setup_defaultPolygonRemoveNotNeededPoints_get,
        _LayoutScript.setup_defaultPolygonRemoveNotNeededPoints_set,
    )
    defaultPolygonFixSelfintersectingPolygons = property(
        _LayoutScript.setup_defaultPolygonFixSelfintersectingPolygons_get,
        _LayoutScript.setup_defaultPolygonFixSelfintersectingPolygons_set,
    )
    paintEngine = property(
        _LayoutScript.setup_paintEngine_get, _LayoutScript.setup_paintEngine_set
    )
    paintHoleConnection = property(
        _LayoutScript.setup_paintHoleConnection_get,
        _LayoutScript.setup_paintHoleConnection_set,
    )
    paintThickLines = property(
        _LayoutScript.setup_paintThickLines_get, _LayoutScript.setup_paintThickLines_set
    )
    netlistAutotrigger = property(
        _LayoutScript.setup_netlistAutotrigger_get,
        _LayoutScript.setup_netlistAutotrigger_set,
    )
    netlistExtractAllAsDevice = property(
        _LayoutScript.setup_netlistExtractAllAsDevice_get,
        _LayoutScript.setup_netlistExtractAllAsDevice_set,
    )
    netListImportVhdlUpperNames = property(
        _LayoutScript.setup_netListImportVhdlUpperNames_get,
        _LayoutScript.setup_netListImportVhdlUpperNames_set,
    )
    netListImportUseComponentLibrary = property(
        _LayoutScript.setup_netListImportUseComponentLibrary_get,
        _LayoutScript.setup_netListImportUseComponentLibrary_set,
    )
    placeModeForPCB = property(
        _LayoutScript.setup_placeModeForPCB_get, _LayoutScript.setup_placeModeForPCB_set
    )
    showPlacementsPorts = property(
        _LayoutScript.setup_showPlacementsPorts_get,
        _LayoutScript.setup_showPlacementsPorts_set,
    )
    pcbSolderClearance = property(
        _LayoutScript.setup_pcbSolderClearance_get,
        _LayoutScript.setup_pcbSolderClearance_set,
    )
    pcbCreamClearance = property(
        _LayoutScript.setup_pcbCreamClearance_get,
        _LayoutScript.setup_pcbCreamClearance_set,
    )
    netlistUnnamedNodes = property(
        _LayoutScript.setup_netlistUnnamedNodes_get,
        _LayoutScript.setup_netlistUnnamedNodes_set,
    )
    netlistGlobalNodes = property(
        _LayoutScript.setup_netlistGlobalNodes_get,
        _LayoutScript.setup_netlistGlobalNodes_set,
    )

    @staticmethod
    def setWireColor(red, green, blue):
        return _LayoutScript.setup_setWireColor(red, green, blue)

    @staticmethod
    def setBusColor(red, green, blue):
        return _LayoutScript.setup_setBusColor(red, green, blue)

    @staticmethod
    def netlistFormats():
        return _LayoutScript.setup_netlistFormats()

    @staticmethod
    def setNetlistFormat(type, value):
        return _LayoutScript.setup_setNetlistFormat(type, value)

    @staticmethod
    def getNetlistFormat(type):
        return _LayoutScript.setup_getNetlistFormat(type)

    @staticmethod
    def setNetlistSubFormat(type, value):
        return _LayoutScript.setup_setNetlistSubFormat(type, value)

    @staticmethod
    def getNetlistSubFormat(type):
        return _LayoutScript.setup_getNetlistSubFormat(type)

    @staticmethod
    def setNetlistSubModelFormat(type, value):
        return _LayoutScript.setup_setNetlistSubModelFormat(type, value)

    @staticmethod
    def getNetlistSubModelFormat(type):
        return _LayoutScript.setup_getNetlistSubModelFormat(type)

    @staticmethod
    def checkNetlistSetup(type):
        return _LayoutScript.setup_checkNetlistSetup(type)

    @staticmethod
    def setCodec(s):
        return _LayoutScript.setup_setCodec(s)

    @staticmethod
    def fullLicense():
        return _LayoutScript.setup_fullLicense()

    @staticmethod
    def setLicense(s):
        return _LayoutScript.setup_setLicense(s)

    macroDirectory = property(
        _LayoutScript.setup_macroDirectory_get, _LayoutScript.setup_macroDirectory_set
    )
    macroPath = property(
        _LayoutScript.setup_macroPath_get, _LayoutScript.setup_macroPath_set
    )
    autostartMacro = property(
        _LayoutScript.setup_autostartMacro_get, _LayoutScript.setup_autostartMacro_set
    )
    autostartMacroTrigger = property(
        _LayoutScript.setup_autostartMacroTrigger_get,
        _LayoutScript.setup_autostartMacroTrigger_set,
    )
    pythonSuffix = property(
        _LayoutScript.setup_pythonSuffix_get, _LayoutScript.setup_pythonSuffix_set
    )

    @staticmethod
    def set(arg1, arg2):
        return _LayoutScript.setup_set(arg1, arg2)

    @staticmethod
    def resetToolbars():
        return _LayoutScript.setup_resetToolbars()

    @staticmethod
    def getNetlistNotUseDatatype():
        return _LayoutScript.setup_getNetlistNotUseDatatype()

    @staticmethod
    def addNetlistNotUseDatatype(arg1):
        return _LayoutScript.setup_addNetlistNotUseDatatype(arg1)

    @staticmethod
    def clearNetlistNotUseDatatype():
        return _LayoutScript.setup_clearNetlistNotUseDatatype()

    @staticmethod
    def dataStore(name, value):
        return _LayoutScript.setup_dataStore(name, value)

    @staticmethod
    def dataGet(name):
        return _LayoutScript.setup_dataGet(name)

    @staticmethod
    def dataClear(name):
        return _LayoutScript.setup_dataClear(name)

    @staticmethod
    def dataClearAll():
        return _LayoutScript.setup_dataClearAll()

    @staticmethod
    def useOaVersion(arg1):
        return _LayoutScript.setup_useOaVersion(arg1)

    @staticmethod
    def version():
        return _LayoutScript.setup_version()

    @staticmethod
    def whiteBackground():
        return _LayoutScript.setup_whiteBackground()

    @staticmethod
    def getLibDefsFilename():
        return _LayoutScript.setup_getLibDefsFilename()

    def __init__(self):
        _LayoutScript.setup_swiginit(self, _LayoutScript.new_setup())

    __swig_destroy__ = _LayoutScript.delete_setup


# Register setup in _LayoutScript:
_LayoutScript.setup_swigregister(setup)


def setup_setBackgroundColor(red, green, blue):
    return _LayoutScript.setup_setBackgroundColor(red, green, blue)


def setup_setMouseColor(red, green, blue):
    return _LayoutScript.setup_setMouseColor(red, green, blue)


def setup_setGridColor(red, green, blue):
    return _LayoutScript.setup_setGridColor(red, green, blue)


def setup_setZeroColor(red, green, blue):
    return _LayoutScript.setup_setZeroColor(red, green, blue)


def setup_setSelectColor(red, green, blue):
    return _LayoutScript.setup_setSelectColor(red, green, blue)


def setup_setHighlightColor(red, green, blue):
    return _LayoutScript.setup_setHighlightColor(red, green, blue)


def setup_setHighlightBrush(brush):
    return _LayoutScript.setup_setHighlightBrush(brush)


def setup_setStrongHighlightColor(red, green, blue):
    return _LayoutScript.setup_setStrongHighlightColor(red, green, blue)


def setup_setStrongHighlightBrush(brush):
    return _LayoutScript.setup_setStrongHighlightBrush(brush)


def setup_setWireColor(red, green, blue):
    return _LayoutScript.setup_setWireColor(red, green, blue)


def setup_setBusColor(red, green, blue):
    return _LayoutScript.setup_setBusColor(red, green, blue)


def setup_netlistFormats():
    return _LayoutScript.setup_netlistFormats()


def setup_setNetlistFormat(type, value):
    return _LayoutScript.setup_setNetlistFormat(type, value)


def setup_getNetlistFormat(type):
    return _LayoutScript.setup_getNetlistFormat(type)


def setup_setNetlistSubFormat(type, value):
    return _LayoutScript.setup_setNetlistSubFormat(type, value)


def setup_getNetlistSubFormat(type):
    return _LayoutScript.setup_getNetlistSubFormat(type)


def setup_setNetlistSubModelFormat(type, value):
    return _LayoutScript.setup_setNetlistSubModelFormat(type, value)


def setup_getNetlistSubModelFormat(type):
    return _LayoutScript.setup_getNetlistSubModelFormat(type)


def setup_checkNetlistSetup(type):
    return _LayoutScript.setup_checkNetlistSetup(type)


def setup_setCodec(s):
    return _LayoutScript.setup_setCodec(s)


def setup_fullLicense():
    return _LayoutScript.setup_fullLicense()


def setup_setLicense(s):
    return _LayoutScript.setup_setLicense(s)


def setup_set(arg1, arg2):
    return _LayoutScript.setup_set(arg1, arg2)


def setup_resetToolbars():
    return _LayoutScript.setup_resetToolbars()


def setup_getNetlistNotUseDatatype():
    return _LayoutScript.setup_getNetlistNotUseDatatype()


def setup_addNetlistNotUseDatatype(arg1):
    return _LayoutScript.setup_addNetlistNotUseDatatype(arg1)


def setup_clearNetlistNotUseDatatype():
    return _LayoutScript.setup_clearNetlistNotUseDatatype()


def setup_dataStore(name, value):
    return _LayoutScript.setup_dataStore(name, value)


def setup_dataGet(name):
    return _LayoutScript.setup_dataGet(name)


def setup_dataClear(name):
    return _LayoutScript.setup_dataClear(name)


def setup_dataClearAll():
    return _LayoutScript.setup_dataClearAll()


def setup_useOaVersion(arg1):
    return _LayoutScript.setup_useOaVersion(arg1)


def setup_version():
    return _LayoutScript.setup_version()


def setup_whiteBackground():
    return _LayoutScript.setup_whiteBackground()


def setup_getLibDefsFilename():
    return _LayoutScript.setup_getLibDefsFilename()


class sheet(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    sheetName = property(
        _LayoutScript.sheet_sheetName_get, _LayoutScript.sheet_sheetName_set
    )
    firstElement = property(
        _LayoutScript.sheet_firstElement_get, _LayoutScript.sheet_firstElement_set
    )

    def existsDevicename(self, sname):
        return _LayoutScript.sheet_existsDevicename(self, sname)

    def getDevice(self, name):
        return _LayoutScript.sheet_getDevice(self, name)

    def addWire(self, p):
        return _LayoutScript.sheet_addWire(self, p)

    def addBus(self, p):
        return _LayoutScript.sheet_addBus(self, p)

    def addGround(self, p):
        return _LayoutScript.sheet_addGround(self, p)

    def addPort(self, p, text):
        return _LayoutScript.sheet_addPort(self, p, text)

    def addBusport(self, p, text):
        return _LayoutScript.sheet_addBusport(self, p, text)

    def addWireLabel(self, p):
        return _LayoutScript.sheet_addWireLabel(self, p)

    def addPlacement(self, *args):
        return _LayoutScript.sheet_addPlacement(self, *args)

    def addPolyline(self, *args):
        return _LayoutScript.sheet_addPolyline(self, *args)

    def addPolygon(self, *args):
        return _LayoutScript.sheet_addPolygon(self, *args)

    def addArc(self, *args):
        return _LayoutScript.sheet_addArc(self, *args)

    def addText(self, *args):
        return _LayoutScript.sheet_addText(self, *args)

    def addCircle(self, *args):
        return _LayoutScript.sheet_addCircle(self, *args)

    def addRect(self, *args):
        return _LayoutScript.sheet_addRect(self, *args)

    def getUnusedDevicename(self, prefix):
        return _LayoutScript.sheet_getUnusedDevicename(self, prefix)

    def deleteElement(self, arg2):
        return _LayoutScript.sheet_deleteElement(self, arg2)

    def getSheetComponent(self):
        return _LayoutScript.sheet_getSheetComponent(self)

    __swig_destroy__ = _LayoutScript.delete_sheet


# Register sheet in _LayoutScript:
_LayoutScript.sheet_swigregister(sheet)


class sheetList(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    thisSheet = property(
        _LayoutScript.sheetList_thisSheet_get, _LayoutScript.sheetList_thisSheet_set
    )
    nextSheet = property(
        _LayoutScript.sheetList_nextSheet_get, _LayoutScript.sheetList_nextSheet_set
    )
    __swig_destroy__ = _LayoutScript.delete_sheetList


# Register sheetList in _LayoutScript:
_LayoutScript.sheetList_swigregister(sheetList)


class schematic(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    filename = property(
        _LayoutScript.schematic_filename_get, _LayoutScript.schematic_filename_set
    )
    drawing = property(
        _LayoutScript.schematic_drawing_get, _LayoutScript.schematic_drawing_set
    )

    def addToolBarBreak(self, *args):
        return _LayoutScript.schematic_addToolBarBreak(self, *args)

    def toolBarAdd(self, name, buttons):
        return _LayoutScript.schematic_toolBarAdd(self, name, buttons)

    def resetShortcut(self, function):
        return _LayoutScript.schematic_resetShortcut(self, function)

    def setShortcut(self, function, key):
        return _LayoutScript.schematic_setShortcut(self, function, key)

    def menuAdd(self, name, entries):
        return _LayoutScript.schematic_menuAdd(self, name, entries)

    def hideToolBar(self, name):
        return _LayoutScript.schematic_hideToolBar(self, name)

    def showToolBar(self, name):
        return _LayoutScript.schematic_showToolBar(self, name)

    def toLayout(self, l):
        return _LayoutScript.schematic_toLayout(self, l)

    def setMenuEnabled(self, name, b):
        return _LayoutScript.schematic_setMenuEnabled(self, name, b)

    def setToolbarEnabled(self, name, b):
        return _LayoutScript.schematic_setToolbarEnabled(self, name, b)

    def setToolbarState(self, arg2):
        return _LayoutScript.schematic_setToolbarState(self, arg2)

    def getToolbarState(self):
        return _LayoutScript.schematic_getToolbarState(self)

    def generateNetList(self, type):
        return _LayoutScript.schematic_generateNetList(self, type)

    def saveNetList(self, filename, type):
        return _LayoutScript.schematic_saveNetList(self, filename, type)

    __swig_destroy__ = _LayoutScript.delete_schematic


# Register schematic in _LayoutScript:
_LayoutScript.schematic_swigregister(schematic)


class schematicDisplay(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    firstSheet = property(
        _LayoutScript.schematicDisplay_firstSheet_get,
        _LayoutScript.schematicDisplay_firstSheet_set,
    )
    currentSheet = property(
        _LayoutScript.schematicDisplay_currentSheet_get,
        _LayoutScript.schematicDisplay_currentSheet_set,
    )

    def scalePlus(self):
        return _LayoutScript.schematicDisplay_scalePlus(self)

    def scaleMinus(self):
        return _LayoutScript.schematicDisplay_scaleMinus(self)

    def scrollLeft(self):
        return _LayoutScript.schematicDisplay_scrollLeft(self)

    def scrollRight(self):
        return _LayoutScript.schematicDisplay_scrollRight(self)

    def scrollUp(self):
        return _LayoutScript.schematicDisplay_scrollUp(self)

    def scrollDown(self):
        return _LayoutScript.schematicDisplay_scrollDown(self)

    def scaleFull(self):
        return _LayoutScript.schematicDisplay_scaleFull(self)

    def openView(self, library, cellName, viewName):
        return _LayoutScript.schematicDisplay_openView(
            self, library, cellName, viewName
        )

    def openFile(self, s):
        return _LayoutScript.schematicDisplay_openFile(self, s)

    def saveFile(self, s):
        return _LayoutScript.schematicDisplay_saveFile(self, s)

    def generateNetList(self, type, filename):
        return _LayoutScript.schematicDisplay_generateNetList(self, type, filename)

    def saveNetList(self, filename, type):
        return _LayoutScript.schematicDisplay_saveNetList(self, filename, type)

    def modified(self):
        return _LayoutScript.schematicDisplay_modified(self)

    def setModifyChanged(self):
        return _LayoutScript.schematicDisplay_setModifyChanged(self)

    def setModifyAdded(self):
        return _LayoutScript.schematicDisplay_setModifyAdded(self)

    def setModifySaved(self):
        return _LayoutScript.schematicDisplay_setModifySaved(self)

    def addSheet(self):
        return _LayoutScript.schematicDisplay_addSheet(self)

    def deleteCurrentSheet(self):
        return _LayoutScript.schematicDisplay_deleteCurrentSheet(self)

    def deleteSheet(self, sheet_):
        return _LayoutScript.schematicDisplay_deleteSheet(self, sheet_)

    def setProbeMode(self, d):
        return _LayoutScript.schematicDisplay_setProbeMode(self, d)

    def updateNetlist(self):
        return _LayoutScript.schematicDisplay_updateNetlist(self)

    def setSheet(self, *args):
        return _LayoutScript.schematicDisplay_setSheet(self, *args)

    def findSheet(self, sheetname):
        return _LayoutScript.schematicDisplay_findSheet(self, sheetname)

    __swig_destroy__ = _LayoutScript.delete_schematicDisplay


# Register schematicDisplay in _LayoutScript:
_LayoutScript.schematicDisplay_swigregister(schematicDisplay)


class sElement(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def addParameter(self, arg2, arg3):
        return _LayoutScript.sElement_addParameter(self, arg2, arg3)

    def setColor(self, *args):
        return _LayoutScript.sElement_setColor(self, *args)

    def setGlobal(self, arg2):
        return _LayoutScript.sElement_setGlobal(self, arg2)

    def isPortOrBusport(self):
        return _LayoutScript.sElement_isPortOrBusport(self)

    def isArc(self):
        return _LayoutScript.sElement_isArc(self)

    def isCircle(self):
        return _LayoutScript.sElement_isCircle(self)

    def isWire(self):
        return _LayoutScript.sElement_isWire(self)

    def isBus(self):
        return _LayoutScript.sElement_isBus(self)

    def isPort(self):
        return _LayoutScript.sElement_isPort(self)

    def isText(self):
        return _LayoutScript.sElement_isText(self)

    def isRect(self):
        return _LayoutScript.sElement_isRect(self)

    def isGround(self):
        return _LayoutScript.sElement_isGround(self)

    def isPolygon(self):
        return _LayoutScript.sElement_isPolygon(self)

    def isPolyline(self):
        return _LayoutScript.sElement_isPolyline(self)

    def isBusport(self):
        return _LayoutScript.sElement_isBusport(self)

    def isDevice(self):
        return _LayoutScript.sElement_isDevice(self)

    def isWireLabel(self):
        return _LayoutScript.sElement_isWireLabel(self)

    def isGlobal(self):
        return _LayoutScript.sElement_isGlobal(self)

    def getComponent(self):
        return _LayoutScript.sElement_getComponent(self)

    def getPoint(self):
        return _LayoutScript.sElement_getPoint(self)

    def getPoints(self):
        return _LayoutScript.sElement_getPoints(self)

    def getColor(self, arg2):
        return _LayoutScript.sElement_getColor(self, arg2)

    def setParameter(self, arg2, arg3):
        return _LayoutScript.sElement_setParameter(self, arg2, arg3)

    def getParameter(self, arg2):
        return _LayoutScript.sElement_getParameter(self, arg2)

    def getIntParameter(self, arg2):
        return _LayoutScript.sElement_getIntParameter(self, arg2)

    def getDoubleParameter(self, arg2):
        return _LayoutScript.sElement_getDoubleParameter(self, arg2)

    __swig_destroy__ = _LayoutScript.delete_sElement


# Register sElement in _LayoutScript:
_LayoutScript.sElement_swigregister(sElement)


class sElementList(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    nextElement = property(
        _LayoutScript.sElementList_nextElement_get,
        _LayoutScript.sElementList_nextElement_set,
    )
    thisElement = property(
        _LayoutScript.sElementList_thisElement_get,
        _LayoutScript.sElementList_thisElement_set,
    )
    __swig_destroy__ = _LayoutScript.delete_sElementList


# Register sElementList in _LayoutScript:
_LayoutScript.sElementList_swigregister(sElementList)


class stringList(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LayoutScript.stringList_swiginit(self, _LayoutScript.new_stringList(*args))

    def append(self, d):
        return _LayoutScript.stringList_append(self, d)

    def at(self, i):
        return _LayoutScript.stringList_at(self, i)

    def clear(self):
        return _LayoutScript.stringList_clear(self)

    def contains(self, d):
        return _LayoutScript.stringList_contains(self, d)

    def insert(self, pos, value):
        return _LayoutScript.stringList_insert(self, pos, value)

    def indexOf(self, i, index=0):
        return _LayoutScript.stringList_indexOf(self, i, index)

    def removeAll(self, d):
        return _LayoutScript.stringList_removeAll(self, d)

    def removeAt(self, pos):
        return _LayoutScript.stringList_removeAt(self, pos)

    def join(self, arg2):
        return _LayoutScript.stringList_join(self, arg2)

    def prepend(self, arg2):
        return _LayoutScript.stringList_prepend(self, arg2)

    def size(self):
        return _LayoutScript.stringList_size(self)

    def set(self, i, d):
        return _LayoutScript.stringList_set(self, i, d)

    def swap(self, pos1, pos2):
        return _LayoutScript.stringList_swap(self, pos1, pos2)

    def sortList(self, style):
        return _LayoutScript.stringList_sortList(self, style)

    def __eq__(self, p2):
        return _LayoutScript.stringList___eq__(self, p2)

    def __ne__(self, p2):
        return _LayoutScript.stringList___ne__(self, p2)

    __swig_destroy__ = _LayoutScript.delete_stringList


# Register stringList in _LayoutScript:
_LayoutScript.stringList_swigregister(stringList)


class strans(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LayoutScript.strans_swiginit(self, _LayoutScript.new_strans(*args))

    __swig_destroy__ = _LayoutScript.delete_strans

    def clearMirror_x(self):
        return _LayoutScript.strans_clearMirror_x(self)

    def getAngle(self):
        return _LayoutScript.strans_getAngle(self)

    def getMirror_x(self):
        return _LayoutScript.strans_getMirror_x(self)

    def getScale(self):
        return _LayoutScript.strans_getScale(self)

    def reset(self):
        return _LayoutScript.strans_reset(self)

    def rotate(self, angle):
        return _LayoutScript.strans_rotate(self, angle)

    def scale(self, d):
        return _LayoutScript.strans_scale(self, d)

    def setMirror_x(self):
        return _LayoutScript.strans_setMirror_x(self)

    def toggleMirror_x(self):
        return _LayoutScript.strans_toggleMirror_x(self)


# Register strans in _LayoutScript:
_LayoutScript.strans_swigregister(strans)


class symbol(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    firstElement = property(
        _LayoutScript.symbol_firstElement_get, _LayoutScript.symbol_firstElement_set
    )

    def addPolyline(self, *args):
        return _LayoutScript.symbol_addPolyline(self, *args)

    def addPolygon(self, *args):
        return _LayoutScript.symbol_addPolygon(self, *args)

    def addArc(self, *args):
        return _LayoutScript.symbol_addArc(self, *args)

    def addText(self, *args):
        return _LayoutScript.symbol_addText(self, *args)

    def addCircle(self, *args):
        return _LayoutScript.symbol_addCircle(self, *args)

    def addRect(self, *args):
        return _LayoutScript.symbol_addRect(self, *args)

    def addPort(self, p, text):
        return _LayoutScript.symbol_addPort(self, p, text)

    def addBusport(self, p, text):
        return _LayoutScript.symbol_addBusport(self, p, text)

    def deleteElement(self, arg2):
        return _LayoutScript.symbol_deleteElement(self, arg2)

    __swig_destroy__ = _LayoutScript.delete_symbol


# Register symbol in _LayoutScript:
_LayoutScript.symbol_swigregister(symbol)


class textDisplay(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def setLexer(self, lexer):
        return _LayoutScript.textDisplay_setLexer(self, lexer)

    def saveFile(self, fileName):
        return _LayoutScript.textDisplay_saveFile(self, fileName)

    def openFile(self, fileName):
        return _LayoutScript.textDisplay_openFile(self, fileName)

    def setText(self, text):
        return _LayoutScript.textDisplay_setText(self, text)

    def modified(self):
        return _LayoutScript.textDisplay_modified(self)

    def setModifyChanged(self):
        return _LayoutScript.textDisplay_setModifyChanged(self)

    def setModifyAdded(self):
        return _LayoutScript.textDisplay_setModifyAdded(self)

    def setModifySaved(self):
        return _LayoutScript.textDisplay_setModifySaved(self)

    fileName = property(
        _LayoutScript.textDisplay_fileName_get, _LayoutScript.textDisplay_fileName_set
    )
    title = property(
        _LayoutScript.textDisplay_title_get, _LayoutScript.textDisplay_title_set
    )

    def text(self):
        return _LayoutScript.textDisplay_text(self)

    def convert(self, format):
        return _LayoutScript.textDisplay_convert(self, format)

    __swig_destroy__ = _LayoutScript.delete_textDisplay


# Register textDisplay in _LayoutScript:
_LayoutScript.textDisplay_swigregister(textDisplay)


class textEdit(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr
    drawing = property(
        _LayoutScript.textEdit_drawing_get, _LayoutScript.textEdit_drawing_set
    )

    def menuAdd(self, name, entries):
        return _LayoutScript.textEdit_menuAdd(self, name, entries)

    def toolBarAdd(self, name, buttons):
        return _LayoutScript.textEdit_toolBarAdd(self, name, buttons)

    def showToolBar(self, name):
        return _LayoutScript.textEdit_showToolBar(self, name)

    def hideToolBar(self, name):
        return _LayoutScript.textEdit_hideToolBar(self, name)

    def countFiles(self):
        return _LayoutScript.textEdit_countFiles(self)

    def findFile(self, arg2):
        return _LayoutScript.textEdit_findFile(self, arg2)

    def needLayoutEditor(self, newOne=False):
        return _LayoutScript.textEdit_needLayoutEditor(self, newOne)

    def needSchematicEditor(self, newOne=False):
        return _LayoutScript.textEdit_needSchematicEditor(self, newOne)

    def save(self):
        return _LayoutScript.textEdit_save(self)

    def saveAs(self):
        return _LayoutScript.textEdit_saveAs(self)

    def open(self, arg2):
        return _LayoutScript.textEdit_open(self, arg2)

    def setFile(self, i):
        return _LayoutScript.textEdit_setFile(self, i)

    def newFile(self):
        return _LayoutScript.textEdit_newFile(self)

    def newDoc(self):
        return _LayoutScript.textEdit_newDoc(self)

    def closeFile(self):
        return _LayoutScript.textEdit_closeFile(self)

    def setText(self, arg2):
        return _LayoutScript.textEdit_setText(self, arg2)

    def setLexer(self, arg2):
        return _LayoutScript.textEdit_setLexer(self, arg2)

    def reload(self):
        return _LayoutScript.textEdit_reload(self)

    __swig_destroy__ = _LayoutScript.delete_textEdit


# Register textEdit in _LayoutScript:
_LayoutScript.textEdit_swigregister(textEdit)


class view3dModule(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    def extrudeCurrentCell(self):
        return _LayoutScript.view3dModule_extrudeCurrentCell(self)

    def extrudeCurrentSelection(self):
        return _LayoutScript.view3dModule_extrudeCurrentSelection(self)

    def extrudeCurrentView(self):
        return _LayoutScript.view3dModule_extrudeCurrentView(self)

    def extrude(self, source, bottomLevel, topLevel, destLayer=-1):
        return _LayoutScript.view3dModule_extrude(
            self, source, bottomLevel, topLevel, destLayer
        )

    def extrudeCurved(self, source, edge, destLayer=-1):
        return _LayoutScript.view3dModule_extrudeCurved(self, source, edge, destLayer)

    def extrudeSlant(
        self, source, bottomLevel, topLevel, extensionBottom, extensionTop, destLayer=-1
    ):
        return _LayoutScript.view3dModule_extrudeSlant(
            self,
            source,
            bottomLevel,
            topLevel,
            extensionBottom,
            extensionTop,
            destLayer,
        )

    def rotate(self, source, angle=360, spiral=0, destLayer=-1):
        return _LayoutScript.view3dModule_rotate(self, source, angle, spiral, destLayer)

    def loadModel(self, source, zLevel, rotation):
        return _LayoutScript.view3dModule_loadModel(self, source, zLevel, rotation)

    def depositReset(self):
        return _LayoutScript.view3dModule_depositReset(self)

    def deposit(self, source, invert, thickness, destLayer=-1, egdeCover=0):
        return _LayoutScript.view3dModule_deposit(
            self, source, invert, thickness, destLayer, egdeCover
        )

    def depositFill(self, soucre, invert, toLevel, destLayer=-1):
        return _LayoutScript.view3dModule_depositFill(
            self, soucre, invert, toLevel, destLayer
        )

    def depositSetLevel(self, soucre, invert, toLevel):
        return _LayoutScript.view3dModule_depositSetLevel(self, soucre, invert, toLevel)

    def clearModel(self):
        return _LayoutScript.view3dModule_clearModel(self)

    def blockToModel(self, sourceLayer, destLayer, lower, upper):
        return _LayoutScript.view3dModule_blockToModel(
            self, sourceLayer, destLayer, lower, upper
        )

    def topRoundedBlockToModel(self, sourceLayer, destLayer, lower, radius, steps):
        return _LayoutScript.view3dModule_topRoundedBlockToModel(
            self, sourceLayer, destLayer, lower, radius, steps
        )

    def bottomRoundedBlockToModel(self, sourceLayer, destLayer, upper, radius, steps):
        return _LayoutScript.view3dModule_bottomRoundedBlockToModel(
            self, sourceLayer, destLayer, upper, radius, steps
        )

    def slantBlockToModel(
        self, sourceLayer, destLayer, lower, upper, topextension, bottomextension
    ):
        return _LayoutScript.view3dModule_slantBlockToModel(
            self, sourceLayer, destLayer, lower, upper, topextension, bottomextension
        )

    def trigger3dRenderAll(self):
        return _LayoutScript.view3dModule_trigger3dRenderAll(self)

    def trigger3dRenderSelect(self):
        return _LayoutScript.view3dModule_trigger3dRenderSelect(self)

    def trigger3dRenderAuto(self):
        return _LayoutScript.view3dModule_trigger3dRenderAuto(self)

    def trigger3dRenderModel(self):
        return _LayoutScript.view3dModule_trigger3dRenderModel(self)

    def trigger3dRenderView(self):
        return _LayoutScript.view3dModule_trigger3dRenderView(self)

    def syncView(self):
        return _LayoutScript.view3dModule_syncView(self)

    def syncUnits(self):
        return _LayoutScript.view3dModule_syncUnits(self)

    def export3d(self, fn):
        return _LayoutScript.view3dModule_export3d(self, fn)

    def import3d(self, fn):
        return _LayoutScript.view3dModule_import3d(self, fn)

    __swig_destroy__ = _LayoutScript.delete_view3dModule


# Register view3dModule in _LayoutScript:
_LayoutScript.view3dModule_swigregister(view3dModule)
