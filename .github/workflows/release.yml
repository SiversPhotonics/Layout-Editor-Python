name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract version from setup.py
        id: extract_version_linux
        run: |
          VERSION=$(python -c "exec(open('linux/setup.py').read()); print(__version__)")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          cd linux
          docker build -t layout_editor_linux -f Dockerfile .
          cd ..

      - name: Run Docker container
        run: |
          docker run --name layout_editor_container layout_editor_linux
          docker cp layout_editor_container:/usr/src/app/dist linux/dist
          docker rm layout_editor_container

      - name: Create GitHub Release for Linux
        id: create_release_linux
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}-linux"
          name: Release v${{ env.VERSION }} for Linux
          body: |
            Release for commit ${{ github.sha }} (Linux).
          files: |
            linux/dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Extract version from setup.py
        id: extract_version_windows
        shell: pwsh
        run: |
          $content = Get-Content windows/setup.py -Raw
          $content = $content -replace "`r`n", "`n"
          $matches = [regex]::Match($content, "__version__\s*=\s*'([^']+)'")
          $version = $matches.Groups[1].Value
          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: Install dependencies
        run: |
          pip install wheel
          cd windows
          python setup.py sdist bdist_wheel

      - name: Create GitHub Release for Windows
        id: create_release_windows
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}-windows"
          name: Release v${{ env.VERSION }} for Windows
          body: |
            Release for commit ${{ github.sha }} (Windows).
          files: |
            windows/dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
